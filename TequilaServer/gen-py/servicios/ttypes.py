#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class CancionSL:
  """
  Attributes:
   - idCancion
   - titulo
   - ruta
   - album
   - artista
   - genero
   - correoArtista
   - idAlbum
   - idGenero
   - imagenAlbum
   - puntuacion
   - anioLanzamiento
   - companiaDiscografica
   - fecha
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'idCancion', None, None, ), # 1
    (2, TType.STRING, 'titulo', None, None, ), # 2
    (3, TType.STRING, 'ruta', None, None, ), # 3
    (4, TType.STRING, 'album', None, None, ), # 4
    (5, TType.STRING, 'artista', None, None, ), # 5
    (6, TType.STRING, 'genero', None, None, ), # 6
    (7, TType.STRING, 'correoArtista', None, None, ), # 7
    (8, TType.I32, 'idAlbum', None, None, ), # 8
    (9, TType.I32, 'idGenero', None, None, ), # 9
    (10, TType.STRING, 'imagenAlbum', None, None, ), # 10
    (11, TType.I32, 'puntuacion', None, None, ), # 11
    (12, TType.STRING, 'anioLanzamiento', None, None, ), # 12
    (13, TType.STRING, 'companiaDiscografica', None, None, ), # 13
    (14, TType.STRING, 'fecha', None, None, ), # 14
  )

  def __init__(self, idCancion=None, titulo=None, ruta=None, album=None, artista=None, genero=None, correoArtista=None, idAlbum=None, idGenero=None, imagenAlbum=None, puntuacion=None, anioLanzamiento=None, companiaDiscografica=None, fecha=None,):
    self.idCancion = idCancion
    self.titulo = titulo
    self.ruta = ruta
    self.album = album
    self.artista = artista
    self.genero = genero
    self.correoArtista = correoArtista
    self.idAlbum = idAlbum
    self.idGenero = idGenero
    self.imagenAlbum = imagenAlbum
    self.puntuacion = puntuacion
    self.anioLanzamiento = anioLanzamiento
    self.companiaDiscografica = companiaDiscografica
    self.fecha = fecha

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.idCancion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.titulo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ruta = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.album = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.artista = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.genero = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.correoArtista = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.idAlbum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.idGenero = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.imagenAlbum = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.puntuacion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.anioLanzamiento = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.companiaDiscografica = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.fecha = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CancionSL')
    if self.idCancion is not None:
      oprot.writeFieldBegin('idCancion', TType.I32, 1)
      oprot.writeI32(self.idCancion)
      oprot.writeFieldEnd()
    if self.titulo is not None:
      oprot.writeFieldBegin('titulo', TType.STRING, 2)
      oprot.writeString(self.titulo)
      oprot.writeFieldEnd()
    if self.ruta is not None:
      oprot.writeFieldBegin('ruta', TType.STRING, 3)
      oprot.writeString(self.ruta)
      oprot.writeFieldEnd()
    if self.album is not None:
      oprot.writeFieldBegin('album', TType.STRING, 4)
      oprot.writeString(self.album)
      oprot.writeFieldEnd()
    if self.artista is not None:
      oprot.writeFieldBegin('artista', TType.STRING, 5)
      oprot.writeString(self.artista)
      oprot.writeFieldEnd()
    if self.genero is not None:
      oprot.writeFieldBegin('genero', TType.STRING, 6)
      oprot.writeString(self.genero)
      oprot.writeFieldEnd()
    if self.correoArtista is not None:
      oprot.writeFieldBegin('correoArtista', TType.STRING, 7)
      oprot.writeString(self.correoArtista)
      oprot.writeFieldEnd()
    if self.idAlbum is not None:
      oprot.writeFieldBegin('idAlbum', TType.I32, 8)
      oprot.writeI32(self.idAlbum)
      oprot.writeFieldEnd()
    if self.idGenero is not None:
      oprot.writeFieldBegin('idGenero', TType.I32, 9)
      oprot.writeI32(self.idGenero)
      oprot.writeFieldEnd()
    if self.imagenAlbum is not None:
      oprot.writeFieldBegin('imagenAlbum', TType.STRING, 10)
      oprot.writeString(self.imagenAlbum)
      oprot.writeFieldEnd()
    if self.puntuacion is not None:
      oprot.writeFieldBegin('puntuacion', TType.I32, 11)
      oprot.writeI32(self.puntuacion)
      oprot.writeFieldEnd()
    if self.anioLanzamiento is not None:
      oprot.writeFieldBegin('anioLanzamiento', TType.STRING, 12)
      oprot.writeString(self.anioLanzamiento)
      oprot.writeFieldEnd()
    if self.companiaDiscografica is not None:
      oprot.writeFieldBegin('companiaDiscografica', TType.STRING, 13)
      oprot.writeString(self.companiaDiscografica)
      oprot.writeFieldEnd()
    if self.fecha is not None:
      oprot.writeFieldBegin('fecha', TType.STRING, 14)
      oprot.writeString(self.fecha)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Usuario:
  """
  Attributes:
   - correo
   - nombre
   - clave
   - tipo
   - foto
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'correo', None, None, ), # 1
    (2, TType.STRING, 'nombre', None, None, ), # 2
    (3, TType.STRING, 'clave', None, None, ), # 3
    (4, TType.STRING, 'tipo', None, None, ), # 4
    (5, TType.STRING, 'foto', None, None, ), # 5
  )

  def __init__(self, correo=None, nombre=None, clave=None, tipo=None, foto=None,):
    self.correo = correo
    self.nombre = nombre
    self.clave = clave
    self.tipo = tipo
    self.foto = foto

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.correo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nombre = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clave = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tipo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.foto = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Usuario')
    if self.correo is not None:
      oprot.writeFieldBegin('correo', TType.STRING, 1)
      oprot.writeString(self.correo)
      oprot.writeFieldEnd()
    if self.nombre is not None:
      oprot.writeFieldBegin('nombre', TType.STRING, 2)
      oprot.writeString(self.nombre)
      oprot.writeFieldEnd()
    if self.clave is not None:
      oprot.writeFieldBegin('clave', TType.STRING, 3)
      oprot.writeString(self.clave)
      oprot.writeFieldEnd()
    if self.tipo is not None:
      oprot.writeFieldBegin('tipo', TType.STRING, 4)
      oprot.writeString(self.tipo)
      oprot.writeFieldEnd()
    if self.foto is not None:
      oprot.writeFieldBegin('foto', TType.STRING, 5)
      oprot.writeString(self.foto)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Puntuacion:
  """
  Attributes:
   - idCancion
   - correo
   - puntuacion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'idCancion', None, None, ), # 1
    (2, TType.STRING, 'correo', None, None, ), # 2
    (3, TType.I32, 'puntuacion', None, None, ), # 3
  )

  def __init__(self, idCancion=None, correo=None, puntuacion=None,):
    self.idCancion = idCancion
    self.correo = correo
    self.puntuacion = puntuacion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.idCancion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.correo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.puntuacion = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Puntuacion')
    if self.idCancion is not None:
      oprot.writeFieldBegin('idCancion', TType.I32, 1)
      oprot.writeI32(self.idCancion)
      oprot.writeFieldEnd()
    if self.correo is not None:
      oprot.writeFieldBegin('correo', TType.STRING, 2)
      oprot.writeString(self.correo)
      oprot.writeFieldEnd()
    if self.puntuacion is not None:
      oprot.writeFieldBegin('puntuacion', TType.I32, 3)
      oprot.writeI32(self.puntuacion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Playlist:
  """
  Attributes:
   - nombre
   - descripcion
   - imagen
   - correo
   - idPlaylist
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nombre', None, None, ), # 1
    (2, TType.STRING, 'descripcion', None, None, ), # 2
    (3, TType.STRING, 'imagen', None, None, ), # 3
    (4, TType.STRING, 'correo', None, None, ), # 4
    (5, TType.I32, 'idPlaylist', None, None, ), # 5
  )

  def __init__(self, nombre=None, descripcion=None, imagen=None, correo=None, idPlaylist=None,):
    self.nombre = nombre
    self.descripcion = descripcion
    self.imagen = imagen
    self.correo = correo
    self.idPlaylist = idPlaylist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nombre = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.descripcion = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imagen = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.correo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.idPlaylist = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Playlist')
    if self.nombre is not None:
      oprot.writeFieldBegin('nombre', TType.STRING, 1)
      oprot.writeString(self.nombre)
      oprot.writeFieldEnd()
    if self.descripcion is not None:
      oprot.writeFieldBegin('descripcion', TType.STRING, 2)
      oprot.writeString(self.descripcion)
      oprot.writeFieldEnd()
    if self.imagen is not None:
      oprot.writeFieldBegin('imagen', TType.STRING, 3)
      oprot.writeString(self.imagen)
      oprot.writeFieldEnd()
    if self.correo is not None:
      oprot.writeFieldBegin('correo', TType.STRING, 4)
      oprot.writeString(self.correo)
      oprot.writeFieldEnd()
    if self.idPlaylist is not None:
      oprot.writeFieldBegin('idPlaylist', TType.I32, 5)
      oprot.writeI32(self.idPlaylist)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Historial:
  """
  Attributes:
   - idCancion
   - correo
   - fecha
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'idCancion', None, None, ), # 1
    (2, TType.STRING, 'correo', None, None, ), # 2
    (3, TType.STRING, 'fecha', None, None, ), # 3
  )

  def __init__(self, idCancion=None, correo=None, fecha=None,):
    self.idCancion = idCancion
    self.correo = correo
    self.fecha = fecha

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.idCancion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.correo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fecha = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Historial')
    if self.idCancion is not None:
      oprot.writeFieldBegin('idCancion', TType.I32, 1)
      oprot.writeI32(self.idCancion)
      oprot.writeFieldEnd()
    if self.correo is not None:
      oprot.writeFieldBegin('correo', TType.STRING, 2)
      oprot.writeString(self.correo)
      oprot.writeFieldEnd()
    if self.fecha is not None:
      oprot.writeFieldBegin('fecha', TType.STRING, 3)
      oprot.writeString(self.fecha)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Biblioteca:
  """
  Attributes:
   - idCancion
   - correo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'idCancion', None, None, ), # 1
    (2, TType.STRING, 'correo', None, None, ), # 2
  )

  def __init__(self, idCancion=None, correo=None,):
    self.idCancion = idCancion
    self.correo = correo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.idCancion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.correo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Biblioteca')
    if self.idCancion is not None:
      oprot.writeFieldBegin('idCancion', TType.I32, 1)
      oprot.writeI32(self.idCancion)
      oprot.writeFieldEnd()
    if self.correo is not None:
      oprot.writeFieldBegin('correo', TType.STRING, 2)
      oprot.writeString(self.correo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Contenido:
  """
  Attributes:
   - idCancion
   - idPlaylist
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'idCancion', None, None, ), # 1
    (2, TType.I32, 'idPlaylist', None, None, ), # 2
  )

  def __init__(self, idCancion=None, idPlaylist=None,):
    self.idCancion = idCancion
    self.idPlaylist = idPlaylist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.idCancion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idPlaylist = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Contenido')
    if self.idCancion is not None:
      oprot.writeFieldBegin('idCancion', TType.I32, 1)
      oprot.writeI32(self.idCancion)
      oprot.writeFieldEnd()
    if self.idPlaylist is not None:
      oprot.writeFieldBegin('idPlaylist', TType.I32, 2)
      oprot.writeI32(self.idPlaylist)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
