#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from servicios import servicios
from servicios.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   obtenerCancionesFiltradas(string criterio)'
  print '  Usuario obtenerUsuario(string correo)'
  print '  bool insertarUsuario(Usuario usuario)'
  print '   obtenerCancionesBiblioteca(string correo)'
  print '  string bajarCancion(string ruta)'
  print '   obtenerPlaylists(string correo)'
  print '   obtenerCancionesPlaylist(i32 idPlaylist)'
  print '  bool insertarPlaylist(Playlist playlist)'
  print '  bool actualizarPlaylist(Playlist playlist)'
  print '  bool elimnarPlaylist(i32 idPlaylist)'
  print '  bool insertarCancionPlaylist(Contenido contenido)'
  print '  bool elimnarCancionPlaylist(i32 idCancion)'
  print '   obtenerHistorial(string correo)'
  print '  bool insertarCancionHistorial(Historial historial)'
  print '  bool eliminarCancionHistorial(i32 idCancion)'
  print '  bool insertarCancionBiblioteca(Biblioteca biblioteca)'
  print '  bool eliminarCancionBiblioteca(i32 idCancion)'
  print '  string diHola(string saludo)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = servicios.Client(protocol)
transport.open()

if cmd == 'obtenerCancionesFiltradas':
  if len(args) != 1:
    print 'obtenerCancionesFiltradas requires 1 args'
    sys.exit(1)
  pp.pprint(client.obtenerCancionesFiltradas(args[0],))

elif cmd == 'obtenerUsuario':
  if len(args) != 1:
    print 'obtenerUsuario requires 1 args'
    sys.exit(1)
  pp.pprint(client.obtenerUsuario(args[0],))

elif cmd == 'insertarUsuario':
  if len(args) != 1:
    print 'insertarUsuario requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertarUsuario(eval(args[0]),))

elif cmd == 'obtenerCancionesBiblioteca':
  if len(args) != 1:
    print 'obtenerCancionesBiblioteca requires 1 args'
    sys.exit(1)
  pp.pprint(client.obtenerCancionesBiblioteca(args[0],))

elif cmd == 'bajarCancion':
  if len(args) != 1:
    print 'bajarCancion requires 1 args'
    sys.exit(1)
  pp.pprint(client.bajarCancion(args[0],))

elif cmd == 'obtenerPlaylists':
  if len(args) != 1:
    print 'obtenerPlaylists requires 1 args'
    sys.exit(1)
  pp.pprint(client.obtenerPlaylists(args[0],))

elif cmd == 'obtenerCancionesPlaylist':
  if len(args) != 1:
    print 'obtenerCancionesPlaylist requires 1 args'
    sys.exit(1)
  pp.pprint(client.obtenerCancionesPlaylist(eval(args[0]),))

elif cmd == 'insertarPlaylist':
  if len(args) != 1:
    print 'insertarPlaylist requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertarPlaylist(eval(args[0]),))

elif cmd == 'actualizarPlaylist':
  if len(args) != 1:
    print 'actualizarPlaylist requires 1 args'
    sys.exit(1)
  pp.pprint(client.actualizarPlaylist(eval(args[0]),))

elif cmd == 'elimnarPlaylist':
  if len(args) != 1:
    print 'elimnarPlaylist requires 1 args'
    sys.exit(1)
  pp.pprint(client.elimnarPlaylist(eval(args[0]),))

elif cmd == 'insertarCancionPlaylist':
  if len(args) != 1:
    print 'insertarCancionPlaylist requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertarCancionPlaylist(eval(args[0]),))

elif cmd == 'elimnarCancionPlaylist':
  if len(args) != 1:
    print 'elimnarCancionPlaylist requires 1 args'
    sys.exit(1)
  pp.pprint(client.elimnarCancionPlaylist(eval(args[0]),))

elif cmd == 'obtenerHistorial':
  if len(args) != 1:
    print 'obtenerHistorial requires 1 args'
    sys.exit(1)
  pp.pprint(client.obtenerHistorial(args[0],))

elif cmd == 'insertarCancionHistorial':
  if len(args) != 1:
    print 'insertarCancionHistorial requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertarCancionHistorial(eval(args[0]),))

elif cmd == 'eliminarCancionHistorial':
  if len(args) != 1:
    print 'eliminarCancionHistorial requires 1 args'
    sys.exit(1)
  pp.pprint(client.eliminarCancionHistorial(eval(args[0]),))

elif cmd == 'insertarCancionBiblioteca':
  if len(args) != 1:
    print 'insertarCancionBiblioteca requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertarCancionBiblioteca(eval(args[0]),))

elif cmd == 'eliminarCancionBiblioteca':
  if len(args) != 1:
    print 'eliminarCancionBiblioteca requires 1 args'
    sys.exit(1)
  pp.pprint(client.eliminarCancionBiblioteca(eval(args[0]),))

elif cmd == 'diHola':
  if len(args) != 1:
    print 'diHola requires 1 args'
    sys.exit(1)
  pp.pprint(client.diHola(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
