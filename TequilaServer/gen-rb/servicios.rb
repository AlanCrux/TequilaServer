  #
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'servicios_types'

module Servicios
  class Client
    include ::Thrift::Client

    def obtenerCancionesFiltradas(criterio)
      send_obtenerCancionesFiltradas(criterio)
      return recv_obtenerCancionesFiltradas()
    end

    def send_obtenerCancionesFiltradas(criterio)
      send_message('obtenerCancionesFiltradas', ObtenerCancionesFiltradas_args, :criterio => criterio)
    end

    def recv_obtenerCancionesFiltradas()
      result = receive_message(ObtenerCancionesFiltradas_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesFiltradas failed: unknown result')
    end

    def obtenerUsuario(correo)
      send_obtenerUsuario(correo)
      return recv_obtenerUsuario()
    end

    def send_obtenerUsuario(correo)
      send_message('obtenerUsuario', ObtenerUsuario_args, :correo => correo)
    end

    def recv_obtenerUsuario()
      result = receive_message(ObtenerUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerUsuario failed: unknown result')
    end

    def insertarUsuario(usuario)
      send_insertarUsuario(usuario)
      return recv_insertarUsuario()
    end

    def send_insertarUsuario(usuario)
      send_message('insertarUsuario', InsertarUsuario_args, :usuario => usuario)
    end

    def recv_insertarUsuario()
      result = receive_message(InsertarUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarUsuario failed: unknown result')
    end

    def obtenerCancionesBiblioteca(correo)
      send_obtenerCancionesBiblioteca(correo)
      return recv_obtenerCancionesBiblioteca()
    end

    def send_obtenerCancionesBiblioteca(correo)
      send_message('obtenerCancionesBiblioteca', ObtenerCancionesBiblioteca_args, :correo => correo)
    end

    def recv_obtenerCancionesBiblioteca()
      result = receive_message(ObtenerCancionesBiblioteca_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesBiblioteca failed: unknown result')
    end

    def bajarCancion(ruta)
      send_bajarCancion(ruta)
      return recv_bajarCancion()
    end

    def send_bajarCancion(ruta)
      send_message('bajarCancion', BajarCancion_args, :ruta => ruta)
    end

    def recv_bajarCancion()
      result = receive_message(BajarCancion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'bajarCancion failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_obtenerCancionesFiltradas(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesFiltradas_args)
      result = ObtenerCancionesFiltradas_result.new()
      result.success = @handler.obtenerCancionesFiltradas(args.criterio)
      write_result(result, oprot, 'obtenerCancionesFiltradas', seqid)
    end

    def process_obtenerUsuario(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerUsuario_args)
      result = ObtenerUsuario_result.new()
      result.success = @handler.obtenerUsuario(args.correo)
      write_result(result, oprot, 'obtenerUsuario', seqid)
    end

    def process_insertarUsuario(seqid, iprot, oprot)
      args = read_args(iprot, InsertarUsuario_args)
      result = InsertarUsuario_result.new()
      result.success = @handler.insertarUsuario(args.usuario)
      write_result(result, oprot, 'insertarUsuario', seqid)
    end

    def process_obtenerCancionesBiblioteca(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesBiblioteca_args)
      result = ObtenerCancionesBiblioteca_result.new()
      result.success = @handler.obtenerCancionesBiblioteca(args.correo)
      write_result(result, oprot, 'obtenerCancionesBiblioteca', seqid)
    end

    def process_bajarCancion(seqid, iprot, oprot)
      args = read_args(iprot, BajarCancion_args)
      result = BajarCancion_result.new()
      result.success = @handler.bajarCancion(args.ruta)
      write_result(result, oprot, 'bajarCancion', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class ObtenerCancionesFiltradas_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIO = 1

    FIELDS = {
      CRITERIO => {:type => ::Thrift::Types::STRING, :name => 'criterio'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesFiltradas_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Usuario}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USUARIO = 1

    FIELDS = {
      USUARIO => {:type => ::Thrift::Types::STRUCT, :name => 'usuario', :class => ::Usuario}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesBiblioteca_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesBiblioteca_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BajarCancion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RUTA = 1

    FIELDS = {
      RUTA => {:type => ::Thrift::Types::STRING, :name => 'ruta'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BajarCancion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

