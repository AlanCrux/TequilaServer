#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'servicios_types'

module Servicios
  class Client
    include ::Thrift::Client

    def obtenerCancionesFiltradas(criterio)
      send_obtenerCancionesFiltradas(criterio)
      return recv_obtenerCancionesFiltradas()
    end

    def send_obtenerCancionesFiltradas(criterio)
      send_message('obtenerCancionesFiltradas', ObtenerCancionesFiltradas_args, :criterio => criterio)
    end

    def recv_obtenerCancionesFiltradas()
      result = receive_message(ObtenerCancionesFiltradas_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesFiltradas failed: unknown result')
    end

    def obtenerConsumidor(correo)
      send_obtenerConsumidor(correo)
      return recv_obtenerConsumidor()
    end

    def send_obtenerConsumidor(correo)
      send_message('obtenerConsumidor', ObtenerConsumidor_args, :correo => correo)
    end

    def recv_obtenerConsumidor()
      result = receive_message(ObtenerConsumidor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerConsumidor failed: unknown result')
    end

    def obtenerArtista(correo)
      send_obtenerArtista(correo)
      return recv_obtenerArtista()
    end

    def send_obtenerArtista(correo)
      send_message('obtenerArtista', ObtenerArtista_args, :correo => correo)
    end

    def recv_obtenerArtista()
      result = receive_message(ObtenerArtista_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerArtista failed: unknown result')
    end

    def insertarConsumidor(consumidor)
      send_insertarConsumidor(consumidor)
      return recv_insertarConsumidor()
    end

    def send_insertarConsumidor(consumidor)
      send_message('insertarConsumidor', InsertarConsumidor_args, :consumidor => consumidor)
    end

    def recv_insertarConsumidor()
      result = receive_message(InsertarConsumidor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarConsumidor failed: unknown result')
    end

    def insertarArtista(artista)
      send_insertarArtista(artista)
      return recv_insertarArtista()
    end

    def send_insertarArtista(artista)
      send_message('insertarArtista', InsertarArtista_args, :artista => artista)
    end

    def recv_insertarArtista()
      result = receive_message(InsertarArtista_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarArtista failed: unknown result')
    end

    def obtenerCancionesBiblioteca(correo)
      send_obtenerCancionesBiblioteca(correo)
      return recv_obtenerCancionesBiblioteca()
    end

    def send_obtenerCancionesBiblioteca(correo)
      send_message('obtenerCancionesBiblioteca', ObtenerCancionesBiblioteca_args, :correo => correo)
    end

    def recv_obtenerCancionesBiblioteca()
      result = receive_message(ObtenerCancionesBiblioteca_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesBiblioteca failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_obtenerCancionesFiltradas(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesFiltradas_args)
      result = ObtenerCancionesFiltradas_result.new()
      result.success = @handler.obtenerCancionesFiltradas(args.criterio)
      write_result(result, oprot, 'obtenerCancionesFiltradas', seqid)
    end

    def process_obtenerConsumidor(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerConsumidor_args)
      result = ObtenerConsumidor_result.new()
      result.success = @handler.obtenerConsumidor(args.correo)
      write_result(result, oprot, 'obtenerConsumidor', seqid)
    end

    def process_obtenerArtista(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerArtista_args)
      result = ObtenerArtista_result.new()
      result.success = @handler.obtenerArtista(args.correo)
      write_result(result, oprot, 'obtenerArtista', seqid)
    end

    def process_insertarConsumidor(seqid, iprot, oprot)
      args = read_args(iprot, InsertarConsumidor_args)
      result = InsertarConsumidor_result.new()
      result.success = @handler.insertarConsumidor(args.consumidor)
      write_result(result, oprot, 'insertarConsumidor', seqid)
    end

    def process_insertarArtista(seqid, iprot, oprot)
      args = read_args(iprot, InsertarArtista_args)
      result = InsertarArtista_result.new()
      result.success = @handler.insertarArtista(args.artista)
      write_result(result, oprot, 'insertarArtista', seqid)
    end

    def process_obtenerCancionesBiblioteca(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesBiblioteca_args)
      result = ObtenerCancionesBiblioteca_result.new()
      result.success = @handler.obtenerCancionesBiblioteca(args.correo)
      write_result(result, oprot, 'obtenerCancionesBiblioteca', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class ObtenerCancionesFiltradas_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIO = 1

    FIELDS = {
      CRITERIO => {:type => ::Thrift::Types::STRING, :name => 'criterio'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesFiltradas_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerConsumidor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerConsumidor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Consumidor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerArtista_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerArtista_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Artista}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarConsumidor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CONSUMIDOR = 1

    FIELDS = {
      CONSUMIDOR => {:type => ::Thrift::Types::STRUCT, :name => 'consumidor', :class => ::Consumidor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarConsumidor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarArtista_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ARTISTA = 1

    FIELDS = {
      ARTISTA => {:type => ::Thrift::Types::STRUCT, :name => 'artista', :class => ::Artista}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarArtista_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesBiblioteca_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesBiblioteca_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

