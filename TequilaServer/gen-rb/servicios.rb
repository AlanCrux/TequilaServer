#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'servicios_types'

module Servicios
  class Client
    include ::Thrift::Client

    def obtenerCancionesFiltradas(criterio)
      send_obtenerCancionesFiltradas(criterio)
      return recv_obtenerCancionesFiltradas()
    end

    def send_obtenerCancionesFiltradas(criterio)
      send_message('obtenerCancionesFiltradas', ObtenerCancionesFiltradas_args, :criterio => criterio)
    end

    def recv_obtenerCancionesFiltradas()
      result = receive_message(ObtenerCancionesFiltradas_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesFiltradas failed: unknown result')
    end

    def obtenerUsuario(correo)
      send_obtenerUsuario(correo)
      return recv_obtenerUsuario()
    end

    def send_obtenerUsuario(correo)
      send_message('obtenerUsuario', ObtenerUsuario_args, :correo => correo)
    end

    def recv_obtenerUsuario()
      result = receive_message(ObtenerUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerUsuario failed: unknown result')
    end

    def insertarUsuario(usuario)
      send_insertarUsuario(usuario)
      return recv_insertarUsuario()
    end

    def send_insertarUsuario(usuario)
      send_message('insertarUsuario', InsertarUsuario_args, :usuario => usuario)
    end

    def recv_insertarUsuario()
      result = receive_message(InsertarUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarUsuario failed: unknown result')
    end

    def obtenerCancionesBiblioteca(correo)
      send_obtenerCancionesBiblioteca(correo)
      return recv_obtenerCancionesBiblioteca()
    end

    def send_obtenerCancionesBiblioteca(correo)
      send_message('obtenerCancionesBiblioteca', ObtenerCancionesBiblioteca_args, :correo => correo)
    end

    def recv_obtenerCancionesBiblioteca()
      result = receive_message(ObtenerCancionesBiblioteca_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesBiblioteca failed: unknown result')
    end

    def obtenerPlaylists(correo)
      send_obtenerPlaylists(correo)
      return recv_obtenerPlaylists()
    end

    def send_obtenerPlaylists(correo)
      send_message('obtenerPlaylists', ObtenerPlaylists_args, :correo => correo)
    end

    def recv_obtenerPlaylists()
      result = receive_message(ObtenerPlaylists_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerPlaylists failed: unknown result')
    end

    def obtenerCancionesPlaylist(idPlaylist)
      send_obtenerCancionesPlaylist(idPlaylist)
      return recv_obtenerCancionesPlaylist()
    end

    def send_obtenerCancionesPlaylist(idPlaylist)
      send_message('obtenerCancionesPlaylist', ObtenerCancionesPlaylist_args, :idPlaylist => idPlaylist)
    end

    def recv_obtenerCancionesPlaylist()
      result = receive_message(ObtenerCancionesPlaylist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesPlaylist failed: unknown result')
    end

    def insertarPlaylist(playlist)
      send_insertarPlaylist(playlist)
      return recv_insertarPlaylist()
    end

    def send_insertarPlaylist(playlist)
      send_message('insertarPlaylist', InsertarPlaylist_args, :playlist => playlist)
    end

    def recv_insertarPlaylist()
      result = receive_message(InsertarPlaylist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarPlaylist failed: unknown result')
    end

    def actualizarPlaylist(playlist)
      send_actualizarPlaylist(playlist)
      return recv_actualizarPlaylist()
    end

    def send_actualizarPlaylist(playlist)
      send_message('actualizarPlaylist', ActualizarPlaylist_args, :playlist => playlist)
    end

    def recv_actualizarPlaylist()
      result = receive_message(ActualizarPlaylist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'actualizarPlaylist failed: unknown result')
    end

    def elimnarPlaylist(idPlaylist)
      send_elimnarPlaylist(idPlaylist)
      return recv_elimnarPlaylist()
    end

    def send_elimnarPlaylist(idPlaylist)
      send_message('elimnarPlaylist', ElimnarPlaylist_args, :idPlaylist => idPlaylist)
    end

    def recv_elimnarPlaylist()
      result = receive_message(ElimnarPlaylist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'elimnarPlaylist failed: unknown result')
    end

    def insertarCancionPlaylist(contenido)
      send_insertarCancionPlaylist(contenido)
      return recv_insertarCancionPlaylist()
    end

    def send_insertarCancionPlaylist(contenido)
      send_message('insertarCancionPlaylist', InsertarCancionPlaylist_args, :contenido => contenido)
    end

    def recv_insertarCancionPlaylist()
      result = receive_message(InsertarCancionPlaylist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarCancionPlaylist failed: unknown result')
    end

    def eliminarCancionPlaylist(idCancion)
      send_eliminarCancionPlaylist(idCancion)
      return recv_eliminarCancionPlaylist()
    end

    def send_eliminarCancionPlaylist(idCancion)
      send_message('eliminarCancionPlaylist', EliminarCancionPlaylist_args, :idCancion => idCancion)
    end

    def recv_eliminarCancionPlaylist()
      result = receive_message(EliminarCancionPlaylist_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'eliminarCancionPlaylist failed: unknown result')
    end

    def obtenerHistorial(correo)
      send_obtenerHistorial(correo)
      return recv_obtenerHistorial()
    end

    def send_obtenerHistorial(correo)
      send_message('obtenerHistorial', ObtenerHistorial_args, :correo => correo)
    end

    def recv_obtenerHistorial()
      result = receive_message(ObtenerHistorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerHistorial failed: unknown result')
    end

    def insertarCancionHistorial(historial)
      send_insertarCancionHistorial(historial)
      return recv_insertarCancionHistorial()
    end

    def send_insertarCancionHistorial(historial)
      send_message('insertarCancionHistorial', InsertarCancionHistorial_args, :historial => historial)
    end

    def recv_insertarCancionHistorial()
      result = receive_message(InsertarCancionHistorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarCancionHistorial failed: unknown result')
    end

    def eliminarCancionHistorial(idCancion)
      send_eliminarCancionHistorial(idCancion)
      return recv_eliminarCancionHistorial()
    end

    def send_eliminarCancionHistorial(idCancion)
      send_message('eliminarCancionHistorial', EliminarCancionHistorial_args, :idCancion => idCancion)
    end

    def recv_eliminarCancionHistorial()
      result = receive_message(EliminarCancionHistorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'eliminarCancionHistorial failed: unknown result')
    end

    def insertarCancionBiblioteca(biblioteca)
      send_insertarCancionBiblioteca(biblioteca)
      return recv_insertarCancionBiblioteca()
    end

    def send_insertarCancionBiblioteca(biblioteca)
      send_message('insertarCancionBiblioteca', InsertarCancionBiblioteca_args, :biblioteca => biblioteca)
    end

    def recv_insertarCancionBiblioteca()
      result = receive_message(InsertarCancionBiblioteca_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarCancionBiblioteca failed: unknown result')
    end

    def eliminarCancionBiblioteca(idCancion)
      send_eliminarCancionBiblioteca(idCancion)
      return recv_eliminarCancionBiblioteca()
    end

    def send_eliminarCancionBiblioteca(idCancion)
      send_message('eliminarCancionBiblioteca', EliminarCancionBiblioteca_args, :idCancion => idCancion)
    end

    def recv_eliminarCancionBiblioteca()
      result = receive_message(EliminarCancionBiblioteca_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'eliminarCancionBiblioteca failed: unknown result')
    end

    def obtenerAlbumesUsuario(correo)
      send_obtenerAlbumesUsuario(correo)
      return recv_obtenerAlbumesUsuario()
    end

    def send_obtenerAlbumesUsuario(correo)
      send_message('obtenerAlbumesUsuario', ObtenerAlbumesUsuario_args, :correo => correo)
    end

    def recv_obtenerAlbumesUsuario()
      result = receive_message(ObtenerAlbumesUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerAlbumesUsuario failed: unknown result')
    end

    def obtenerCancionesAlbum(idAlbum)
      send_obtenerCancionesAlbum(idAlbum)
      return recv_obtenerCancionesAlbum()
    end

    def send_obtenerCancionesAlbum(idAlbum)
      send_message('obtenerCancionesAlbum', ObtenerCancionesAlbum_args, :idAlbum => idAlbum)
    end

    def recv_obtenerCancionesAlbum()
      result = receive_message(ObtenerCancionesAlbum_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesAlbum failed: unknown result')
    end

    def obtenerArtistasUsuario(correo)
      send_obtenerArtistasUsuario(correo)
      return recv_obtenerArtistasUsuario()
    end

    def send_obtenerArtistasUsuario(correo)
      send_message('obtenerArtistasUsuario', ObtenerArtistasUsuario_args, :correo => correo)
    end

    def recv_obtenerArtistasUsuario()
      result = receive_message(ObtenerArtistasUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerArtistasUsuario failed: unknown result')
    end

    def obtenerCancionesArtista(correoCliente, correoArtista)
      send_obtenerCancionesArtista(correoCliente, correoArtista)
      return recv_obtenerCancionesArtista()
    end

    def send_obtenerCancionesArtista(correoCliente, correoArtista)
      send_message('obtenerCancionesArtista', ObtenerCancionesArtista_args, :correoCliente => correoCliente, :correoArtista => correoArtista)
    end

    def recv_obtenerCancionesArtista()
      result = receive_message(ObtenerCancionesArtista_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesArtista failed: unknown result')
    end

    def obtenerGenerosUsuario(correo)
      send_obtenerGenerosUsuario(correo)
      return recv_obtenerGenerosUsuario()
    end

    def send_obtenerGenerosUsuario(correo)
      send_message('obtenerGenerosUsuario', ObtenerGenerosUsuario_args, :correo => correo)
    end

    def recv_obtenerGenerosUsuario()
      result = receive_message(ObtenerGenerosUsuario_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerGenerosUsuario failed: unknown result')
    end

    def obtenerCancionesGenero(idGenero, correo)
      send_obtenerCancionesGenero(idGenero, correo)
      return recv_obtenerCancionesGenero()
    end

    def send_obtenerCancionesGenero(idGenero, correo)
      send_message('obtenerCancionesGenero', ObtenerCancionesGenero_args, :idGenero => idGenero, :correo => correo)
    end

    def recv_obtenerCancionesGenero()
      result = receive_message(ObtenerCancionesGenero_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesGenero failed: unknown result')
    end

    def crearRadio(idGenero)
      send_crearRadio(idGenero)
      return recv_crearRadio()
    end

    def send_crearRadio(idGenero)
      send_message('crearRadio', CrearRadio_args, :idGenero => idGenero)
    end

    def recv_crearRadio()
      result = receive_message(CrearRadio_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'crearRadio failed: unknown result')
    end

    def obtenerCancionesDelArtista(correo)
      send_obtenerCancionesDelArtista(correo)
      return recv_obtenerCancionesDelArtista()
    end

    def send_obtenerCancionesDelArtista(correo)
      send_message('obtenerCancionesDelArtista', ObtenerCancionesDelArtista_args, :correo => correo)
    end

    def recv_obtenerCancionesDelArtista()
      result = receive_message(ObtenerCancionesDelArtista_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesDelArtista failed: unknown result')
    end

    def obtenerAlbumesArtista(correo)
      send_obtenerAlbumesArtista(correo)
      return recv_obtenerAlbumesArtista()
    end

    def send_obtenerAlbumesArtista(correo)
      send_message('obtenerAlbumesArtista', ObtenerAlbumesArtista_args, :correo => correo)
    end

    def recv_obtenerAlbumesArtista()
      result = receive_message(ObtenerAlbumesArtista_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerAlbumesArtista failed: unknown result')
    end

    def obtenerCancionesAlbumArtista(idAlbum)
      send_obtenerCancionesAlbumArtista(idAlbum)
      return recv_obtenerCancionesAlbumArtista()
    end

    def send_obtenerCancionesAlbumArtista(idAlbum)
      send_message('obtenerCancionesAlbumArtista', ObtenerCancionesAlbumArtista_args, :idAlbum => idAlbum)
    end

    def recv_obtenerCancionesAlbumArtista()
      result = receive_message(ObtenerCancionesAlbumArtista_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerCancionesAlbumArtista failed: unknown result')
    end

    def insertarAlbum(album)
      send_insertarAlbum(album)
      return recv_insertarAlbum()
    end

    def send_insertarAlbum(album)
      send_message('insertarAlbum', InsertarAlbum_args, :album => album)
    end

    def recv_insertarAlbum()
      result = receive_message(InsertarAlbum_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarAlbum failed: unknown result')
    end

    def insertarCancion(cancion)
      send_insertarCancion(cancion)
      return recv_insertarCancion()
    end

    def send_insertarCancion(cancion)
      send_message('insertarCancion', InsertarCancion_args, :cancion => cancion)
    end

    def recv_insertarCancion()
      result = receive_message(InsertarCancion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertarCancion failed: unknown result')
    end

    def actualizarPuntuacion(biblioteca)
      send_actualizarPuntuacion(biblioteca)
      return recv_actualizarPuntuacion()
    end

    def send_actualizarPuntuacion(biblioteca)
      send_message('actualizarPuntuacion', ActualizarPuntuacion_args, :biblioteca => biblioteca)
    end

    def recv_actualizarPuntuacion()
      result = receive_message(ActualizarPuntuacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'actualizarPuntuacion failed: unknown result')
    end

    def actualizarBiblioteca(biblioteca)
      send_actualizarBiblioteca(biblioteca)
      return recv_actualizarBiblioteca()
    end

    def send_actualizarBiblioteca(biblioteca)
      send_message('actualizarBiblioteca', ActualizarBiblioteca_args, :biblioteca => biblioteca)
    end

    def recv_actualizarBiblioteca()
      result = receive_message(ActualizarBiblioteca_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'actualizarBiblioteca failed: unknown result')
    end

    def obtenerGeneros()
      send_obtenerGeneros()
      return recv_obtenerGeneros()
    end

    def send_obtenerGeneros()
      send_message('obtenerGeneros', ObtenerGeneros_args)
    end

    def recv_obtenerGeneros()
      result = receive_message(ObtenerGeneros_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerGeneros failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_obtenerCancionesFiltradas(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesFiltradas_args)
      result = ObtenerCancionesFiltradas_result.new()
      result.success = @handler.obtenerCancionesFiltradas(args.criterio)
      write_result(result, oprot, 'obtenerCancionesFiltradas', seqid)
    end

    def process_obtenerUsuario(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerUsuario_args)
      result = ObtenerUsuario_result.new()
      result.success = @handler.obtenerUsuario(args.correo)
      write_result(result, oprot, 'obtenerUsuario', seqid)
    end

    def process_insertarUsuario(seqid, iprot, oprot)
      args = read_args(iprot, InsertarUsuario_args)
      result = InsertarUsuario_result.new()
      result.success = @handler.insertarUsuario(args.usuario)
      write_result(result, oprot, 'insertarUsuario', seqid)
    end

    def process_obtenerCancionesBiblioteca(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesBiblioteca_args)
      result = ObtenerCancionesBiblioteca_result.new()
      result.success = @handler.obtenerCancionesBiblioteca(args.correo)
      write_result(result, oprot, 'obtenerCancionesBiblioteca', seqid)
    end

    def process_obtenerPlaylists(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerPlaylists_args)
      result = ObtenerPlaylists_result.new()
      result.success = @handler.obtenerPlaylists(args.correo)
      write_result(result, oprot, 'obtenerPlaylists', seqid)
    end

    def process_obtenerCancionesPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesPlaylist_args)
      result = ObtenerCancionesPlaylist_result.new()
      result.success = @handler.obtenerCancionesPlaylist(args.idPlaylist)
      write_result(result, oprot, 'obtenerCancionesPlaylist', seqid)
    end

    def process_insertarPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, InsertarPlaylist_args)
      result = InsertarPlaylist_result.new()
      result.success = @handler.insertarPlaylist(args.playlist)
      write_result(result, oprot, 'insertarPlaylist', seqid)
    end

    def process_actualizarPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, ActualizarPlaylist_args)
      result = ActualizarPlaylist_result.new()
      result.success = @handler.actualizarPlaylist(args.playlist)
      write_result(result, oprot, 'actualizarPlaylist', seqid)
    end

    def process_elimnarPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, ElimnarPlaylist_args)
      result = ElimnarPlaylist_result.new()
      result.success = @handler.elimnarPlaylist(args.idPlaylist)
      write_result(result, oprot, 'elimnarPlaylist', seqid)
    end

    def process_insertarCancionPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, InsertarCancionPlaylist_args)
      result = InsertarCancionPlaylist_result.new()
      result.success = @handler.insertarCancionPlaylist(args.contenido)
      write_result(result, oprot, 'insertarCancionPlaylist', seqid)
    end

    def process_eliminarCancionPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, EliminarCancionPlaylist_args)
      result = EliminarCancionPlaylist_result.new()
      result.success = @handler.eliminarCancionPlaylist(args.idCancion)
      write_result(result, oprot, 'eliminarCancionPlaylist', seqid)
    end

    def process_obtenerHistorial(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerHistorial_args)
      result = ObtenerHistorial_result.new()
      result.success = @handler.obtenerHistorial(args.correo)
      write_result(result, oprot, 'obtenerHistorial', seqid)
    end

    def process_insertarCancionHistorial(seqid, iprot, oprot)
      args = read_args(iprot, InsertarCancionHistorial_args)
      result = InsertarCancionHistorial_result.new()
      result.success = @handler.insertarCancionHistorial(args.historial)
      write_result(result, oprot, 'insertarCancionHistorial', seqid)
    end

    def process_eliminarCancionHistorial(seqid, iprot, oprot)
      args = read_args(iprot, EliminarCancionHistorial_args)
      result = EliminarCancionHistorial_result.new()
      result.success = @handler.eliminarCancionHistorial(args.idCancion)
      write_result(result, oprot, 'eliminarCancionHistorial', seqid)
    end

    def process_insertarCancionBiblioteca(seqid, iprot, oprot)
      args = read_args(iprot, InsertarCancionBiblioteca_args)
      result = InsertarCancionBiblioteca_result.new()
      result.success = @handler.insertarCancionBiblioteca(args.biblioteca)
      write_result(result, oprot, 'insertarCancionBiblioteca', seqid)
    end

    def process_eliminarCancionBiblioteca(seqid, iprot, oprot)
      args = read_args(iprot, EliminarCancionBiblioteca_args)
      result = EliminarCancionBiblioteca_result.new()
      result.success = @handler.eliminarCancionBiblioteca(args.idCancion)
      write_result(result, oprot, 'eliminarCancionBiblioteca', seqid)
    end

    def process_obtenerAlbumesUsuario(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerAlbumesUsuario_args)
      result = ObtenerAlbumesUsuario_result.new()
      result.success = @handler.obtenerAlbumesUsuario(args.correo)
      write_result(result, oprot, 'obtenerAlbumesUsuario', seqid)
    end

    def process_obtenerCancionesAlbum(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesAlbum_args)
      result = ObtenerCancionesAlbum_result.new()
      result.success = @handler.obtenerCancionesAlbum(args.idAlbum)
      write_result(result, oprot, 'obtenerCancionesAlbum', seqid)
    end

    def process_obtenerArtistasUsuario(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerArtistasUsuario_args)
      result = ObtenerArtistasUsuario_result.new()
      result.success = @handler.obtenerArtistasUsuario(args.correo)
      write_result(result, oprot, 'obtenerArtistasUsuario', seqid)
    end

    def process_obtenerCancionesArtista(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesArtista_args)
      result = ObtenerCancionesArtista_result.new()
      result.success = @handler.obtenerCancionesArtista(args.correoCliente, args.correoArtista)
      write_result(result, oprot, 'obtenerCancionesArtista', seqid)
    end

    def process_obtenerGenerosUsuario(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerGenerosUsuario_args)
      result = ObtenerGenerosUsuario_result.new()
      result.success = @handler.obtenerGenerosUsuario(args.correo)
      write_result(result, oprot, 'obtenerGenerosUsuario', seqid)
    end

    def process_obtenerCancionesGenero(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesGenero_args)
      result = ObtenerCancionesGenero_result.new()
      result.success = @handler.obtenerCancionesGenero(args.idGenero, args.correo)
      write_result(result, oprot, 'obtenerCancionesGenero', seqid)
    end

    def process_crearRadio(seqid, iprot, oprot)
      args = read_args(iprot, CrearRadio_args)
      result = CrearRadio_result.new()
      result.success = @handler.crearRadio(args.idGenero)
      write_result(result, oprot, 'crearRadio', seqid)
    end

    def process_obtenerCancionesDelArtista(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesDelArtista_args)
      result = ObtenerCancionesDelArtista_result.new()
      result.success = @handler.obtenerCancionesDelArtista(args.correo)
      write_result(result, oprot, 'obtenerCancionesDelArtista', seqid)
    end

    def process_obtenerAlbumesArtista(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerAlbumesArtista_args)
      result = ObtenerAlbumesArtista_result.new()
      result.success = @handler.obtenerAlbumesArtista(args.correo)
      write_result(result, oprot, 'obtenerAlbumesArtista', seqid)
    end

    def process_obtenerCancionesAlbumArtista(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerCancionesAlbumArtista_args)
      result = ObtenerCancionesAlbumArtista_result.new()
      result.success = @handler.obtenerCancionesAlbumArtista(args.idAlbum)
      write_result(result, oprot, 'obtenerCancionesAlbumArtista', seqid)
    end

    def process_insertarAlbum(seqid, iprot, oprot)
      args = read_args(iprot, InsertarAlbum_args)
      result = InsertarAlbum_result.new()
      result.success = @handler.insertarAlbum(args.album)
      write_result(result, oprot, 'insertarAlbum', seqid)
    end

    def process_insertarCancion(seqid, iprot, oprot)
      args = read_args(iprot, InsertarCancion_args)
      result = InsertarCancion_result.new()
      result.success = @handler.insertarCancion(args.cancion)
      write_result(result, oprot, 'insertarCancion', seqid)
    end

    def process_actualizarPuntuacion(seqid, iprot, oprot)
      args = read_args(iprot, ActualizarPuntuacion_args)
      result = ActualizarPuntuacion_result.new()
      result.success = @handler.actualizarPuntuacion(args.biblioteca)
      write_result(result, oprot, 'actualizarPuntuacion', seqid)
    end

    def process_actualizarBiblioteca(seqid, iprot, oprot)
      args = read_args(iprot, ActualizarBiblioteca_args)
      result = ActualizarBiblioteca_result.new()
      result.success = @handler.actualizarBiblioteca(args.biblioteca)
      write_result(result, oprot, 'actualizarBiblioteca', seqid)
    end

    def process_obtenerGeneros(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerGeneros_args)
      result = ObtenerGeneros_result.new()
      result.success = @handler.obtenerGeneros()
      write_result(result, oprot, 'obtenerGeneros', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class ObtenerCancionesFiltradas_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CRITERIO = 1

    FIELDS = {
      CRITERIO => {:type => ::Thrift::Types::STRING, :name => 'criterio'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesFiltradas_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Usuario}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USUARIO = 1

    FIELDS = {
      USUARIO => {:type => ::Thrift::Types::STRUCT, :name => 'usuario', :class => ::Usuario}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesBiblioteca_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesBiblioteca_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerPlaylists_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerPlaylists_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Playlist}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesPlaylist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDPLAYLIST = 1

    FIELDS = {
      IDPLAYLIST => {:type => ::Thrift::Types::I32, :name => 'idPlaylist'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesPlaylist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarPlaylist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PLAYLIST = 1

    FIELDS = {
      PLAYLIST => {:type => ::Thrift::Types::STRUCT, :name => 'playlist', :class => ::Playlist}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarPlaylist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarPlaylist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PLAYLIST = 1

    FIELDS = {
      PLAYLIST => {:type => ::Thrift::Types::STRUCT, :name => 'playlist', :class => ::Playlist}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarPlaylist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ElimnarPlaylist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDPLAYLIST = 1

    FIELDS = {
      IDPLAYLIST => {:type => ::Thrift::Types::I32, :name => 'idPlaylist'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ElimnarPlaylist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancionPlaylist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CONTENIDO = 1

    FIELDS = {
      CONTENIDO => {:type => ::Thrift::Types::STRUCT, :name => 'contenido', :class => ::Contenido}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancionPlaylist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EliminarCancionPlaylist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDCANCION = 1

    FIELDS = {
      IDCANCION => {:type => ::Thrift::Types::I32, :name => 'idCancion'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EliminarCancionPlaylist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerHistorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerHistorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancionHistorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HISTORIAL = 1

    FIELDS = {
      HISTORIAL => {:type => ::Thrift::Types::STRUCT, :name => 'historial', :class => ::Historial}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancionHistorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EliminarCancionHistorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDCANCION = 1

    FIELDS = {
      IDCANCION => {:type => ::Thrift::Types::I32, :name => 'idCancion'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EliminarCancionHistorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancionBiblioteca_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BIBLIOTECA = 1

    FIELDS = {
      BIBLIOTECA => {:type => ::Thrift::Types::STRUCT, :name => 'biblioteca', :class => ::Biblioteca}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancionBiblioteca_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EliminarCancionBiblioteca_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDCANCION = 1

    FIELDS = {
      IDCANCION => {:type => ::Thrift::Types::I32, :name => 'idCancion'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EliminarCancionBiblioteca_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerAlbumesUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerAlbumesUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::AlbumSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesAlbum_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDALBUM = 1

    FIELDS = {
      IDALBUM => {:type => ::Thrift::Types::I32, :name => 'idAlbum'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesAlbum_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerArtistasUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerArtistasUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Usuario}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesArtista_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREOCLIENTE = 1
    CORREOARTISTA = 2

    FIELDS = {
      CORREOCLIENTE => {:type => ::Thrift::Types::STRING, :name => 'correoCliente'},
      CORREOARTISTA => {:type => ::Thrift::Types::STRING, :name => 'correoArtista'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesArtista_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerGenerosUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerGenerosUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Genero}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesGenero_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDGENERO = 1
    CORREO = 2

    FIELDS = {
      IDGENERO => {:type => ::Thrift::Types::I32, :name => 'idGenero'},
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesGenero_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CrearRadio_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDGENERO = 1

    FIELDS = {
      IDGENERO => {:type => ::Thrift::Types::I32, :name => 'idGenero'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CrearRadio_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesDelArtista_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesDelArtista_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerAlbumesArtista_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CORREO = 1

    FIELDS = {
      CORREO => {:type => ::Thrift::Types::STRING, :name => 'correo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerAlbumesArtista_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::AlbumSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesAlbumArtista_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDALBUM = 1

    FIELDS = {
      IDALBUM => {:type => ::Thrift::Types::I32, :name => 'idAlbum'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerCancionesAlbumArtista_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CancionSL}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarAlbum_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ALBUM = 1

    FIELDS = {
      ALBUM => {:type => ::Thrift::Types::STRUCT, :name => 'album', :class => ::Album}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarAlbum_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CANCION = 1

    FIELDS = {
      CANCION => {:type => ::Thrift::Types::STRUCT, :name => 'cancion', :class => ::Cancion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InsertarCancion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarPuntuacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BIBLIOTECA = 1

    FIELDS = {
      BIBLIOTECA => {:type => ::Thrift::Types::STRUCT, :name => 'biblioteca', :class => ::Biblioteca}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarPuntuacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarBiblioteca_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BIBLIOTECA = 1

    FIELDS = {
      BIBLIOTECA => {:type => ::Thrift::Types::STRUCT, :name => 'biblioteca', :class => ::Biblioteca}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarBiblioteca_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerGeneros_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerGeneros_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Genero}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

