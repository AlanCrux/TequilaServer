/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CancionSl implements org.apache.thrift.TBase<CancionSl, CancionSl._Fields>, java.io.Serializable, Cloneable, Comparable<CancionSl> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancionSl");

  private static final org.apache.thrift.protocol.TField ID_CANCION_FIELD_DESC = new org.apache.thrift.protocol.TField("idCancion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITULO_FIELD_DESC = new org.apache.thrift.protocol.TField("titulo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RUTA_FIELD_DESC = new org.apache.thrift.protocol.TField("ruta", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("album", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ARTISTA_FIELD_DESC = new org.apache.thrift.protocol.TField("artista", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DURACION_FIELD_DESC = new org.apache.thrift.protocol.TField("duracion", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CancionSlStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CancionSlTupleSchemeFactory());
  }

  public int idCancion; // required
  public String titulo; // required
  public String ruta; // required
  public String album; // required
  public String artista; // required
  public double duracion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_CANCION((short)1, "idCancion"),
    TITULO((short)2, "titulo"),
    RUTA((short)3, "ruta"),
    ALBUM((short)4, "album"),
    ARTISTA((short)5, "artista"),
    DURACION((short)6, "duracion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_CANCION
          return ID_CANCION;
        case 2: // TITULO
          return TITULO;
        case 3: // RUTA
          return RUTA;
        case 4: // ALBUM
          return ALBUM;
        case 5: // ARTISTA
          return ARTISTA;
        case 6: // DURACION
          return DURACION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDCANCION_ISSET_ID = 0;
  private static final int __DURACION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_CANCION, new org.apache.thrift.meta_data.FieldMetaData("idCancion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITULO, new org.apache.thrift.meta_data.FieldMetaData("titulo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUTA, new org.apache.thrift.meta_data.FieldMetaData("ruta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM, new org.apache.thrift.meta_data.FieldMetaData("album", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTISTA, new org.apache.thrift.meta_data.FieldMetaData("artista", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURACION, new org.apache.thrift.meta_data.FieldMetaData("duracion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancionSl.class, metaDataMap);
  }

  public CancionSl() {
  }

  public CancionSl(
    int idCancion,
    String titulo,
    String ruta,
    String album,
    String artista,
    double duracion)
  {
    this();
    this.idCancion = idCancion;
    setIdCancionIsSet(true);
    this.titulo = titulo;
    this.ruta = ruta;
    this.album = album;
    this.artista = artista;
    this.duracion = duracion;
    setDuracionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CancionSl(CancionSl other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idCancion = other.idCancion;
    if (other.isSetTitulo()) {
      this.titulo = other.titulo;
    }
    if (other.isSetRuta()) {
      this.ruta = other.ruta;
    }
    if (other.isSetAlbum()) {
      this.album = other.album;
    }
    if (other.isSetArtista()) {
      this.artista = other.artista;
    }
    this.duracion = other.duracion;
  }

  public CancionSl deepCopy() {
    return new CancionSl(this);
  }

  @Override
  public void clear() {
    setIdCancionIsSet(false);
    this.idCancion = 0;
    this.titulo = null;
    this.ruta = null;
    this.album = null;
    this.artista = null;
    setDuracionIsSet(false);
    this.duracion = 0.0;
  }

  public int getIdCancion() {
    return this.idCancion;
  }

  public CancionSl setIdCancion(int idCancion) {
    this.idCancion = idCancion;
    setIdCancionIsSet(true);
    return this;
  }

  public void unsetIdCancion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDCANCION_ISSET_ID);
  }

  /** Returns true if field idCancion is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCancion() {
    return EncodingUtils.testBit(__isset_bitfield, __IDCANCION_ISSET_ID);
  }

  public void setIdCancionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDCANCION_ISSET_ID, value);
  }

  public String getTitulo() {
    return this.titulo;
  }

  public CancionSl setTitulo(String titulo) {
    this.titulo = titulo;
    return this;
  }

  public void unsetTitulo() {
    this.titulo = null;
  }

  /** Returns true if field titulo is set (has been assigned a value) and false otherwise */
  public boolean isSetTitulo() {
    return this.titulo != null;
  }

  public void setTituloIsSet(boolean value) {
    if (!value) {
      this.titulo = null;
    }
  }

  public String getRuta() {
    return this.ruta;
  }

  public CancionSl setRuta(String ruta) {
    this.ruta = ruta;
    return this;
  }

  public void unsetRuta() {
    this.ruta = null;
  }

  /** Returns true if field ruta is set (has been assigned a value) and false otherwise */
  public boolean isSetRuta() {
    return this.ruta != null;
  }

  public void setRutaIsSet(boolean value) {
    if (!value) {
      this.ruta = null;
    }
  }

  public String getAlbum() {
    return this.album;
  }

  public CancionSl setAlbum(String album) {
    this.album = album;
    return this;
  }

  public void unsetAlbum() {
    this.album = null;
  }

  /** Returns true if field album is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbum() {
    return this.album != null;
  }

  public void setAlbumIsSet(boolean value) {
    if (!value) {
      this.album = null;
    }
  }

  public String getArtista() {
    return this.artista;
  }

  public CancionSl setArtista(String artista) {
    this.artista = artista;
    return this;
  }

  public void unsetArtista() {
    this.artista = null;
  }

  /** Returns true if field artista is set (has been assigned a value) and false otherwise */
  public boolean isSetArtista() {
    return this.artista != null;
  }

  public void setArtistaIsSet(boolean value) {
    if (!value) {
      this.artista = null;
    }
  }

  public double getDuracion() {
    return this.duracion;
  }

  public CancionSl setDuracion(double duracion) {
    this.duracion = duracion;
    setDuracionIsSet(true);
    return this;
  }

  public void unsetDuracion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURACION_ISSET_ID);
  }

  /** Returns true if field duracion is set (has been assigned a value) and false otherwise */
  public boolean isSetDuracion() {
    return EncodingUtils.testBit(__isset_bitfield, __DURACION_ISSET_ID);
  }

  public void setDuracionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURACION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID_CANCION:
      if (value == null) {
        unsetIdCancion();
      } else {
        setIdCancion((Integer)value);
      }
      break;

    case TITULO:
      if (value == null) {
        unsetTitulo();
      } else {
        setTitulo((String)value);
      }
      break;

    case RUTA:
      if (value == null) {
        unsetRuta();
      } else {
        setRuta((String)value);
      }
      break;

    case ALBUM:
      if (value == null) {
        unsetAlbum();
      } else {
        setAlbum((String)value);
      }
      break;

    case ARTISTA:
      if (value == null) {
        unsetArtista();
      } else {
        setArtista((String)value);
      }
      break;

    case DURACION:
      if (value == null) {
        unsetDuracion();
      } else {
        setDuracion((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_CANCION:
      return Integer.valueOf(getIdCancion());

    case TITULO:
      return getTitulo();

    case RUTA:
      return getRuta();

    case ALBUM:
      return getAlbum();

    case ARTISTA:
      return getArtista();

    case DURACION:
      return Double.valueOf(getDuracion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID_CANCION:
      return isSetIdCancion();
    case TITULO:
      return isSetTitulo();
    case RUTA:
      return isSetRuta();
    case ALBUM:
      return isSetAlbum();
    case ARTISTA:
      return isSetArtista();
    case DURACION:
      return isSetDuracion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CancionSl)
      return this.equals((CancionSl)that);
    return false;
  }

  public boolean equals(CancionSl that) {
    if (that == null)
      return false;

    boolean this_present_idCancion = true;
    boolean that_present_idCancion = true;
    if (this_present_idCancion || that_present_idCancion) {
      if (!(this_present_idCancion && that_present_idCancion))
        return false;
      if (this.idCancion != that.idCancion)
        return false;
    }

    boolean this_present_titulo = true && this.isSetTitulo();
    boolean that_present_titulo = true && that.isSetTitulo();
    if (this_present_titulo || that_present_titulo) {
      if (!(this_present_titulo && that_present_titulo))
        return false;
      if (!this.titulo.equals(that.titulo))
        return false;
    }

    boolean this_present_ruta = true && this.isSetRuta();
    boolean that_present_ruta = true && that.isSetRuta();
    if (this_present_ruta || that_present_ruta) {
      if (!(this_present_ruta && that_present_ruta))
        return false;
      if (!this.ruta.equals(that.ruta))
        return false;
    }

    boolean this_present_album = true && this.isSetAlbum();
    boolean that_present_album = true && that.isSetAlbum();
    if (this_present_album || that_present_album) {
      if (!(this_present_album && that_present_album))
        return false;
      if (!this.album.equals(that.album))
        return false;
    }

    boolean this_present_artista = true && this.isSetArtista();
    boolean that_present_artista = true && that.isSetArtista();
    if (this_present_artista || that_present_artista) {
      if (!(this_present_artista && that_present_artista))
        return false;
      if (!this.artista.equals(that.artista))
        return false;
    }

    boolean this_present_duracion = true;
    boolean that_present_duracion = true;
    if (this_present_duracion || that_present_duracion) {
      if (!(this_present_duracion && that_present_duracion))
        return false;
      if (this.duracion != that.duracion)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CancionSl other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdCancion()).compareTo(other.isSetIdCancion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCancion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCancion, other.idCancion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitulo()).compareTo(other.isSetTitulo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitulo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titulo, other.titulo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuta()).compareTo(other.isSetRuta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruta, other.ruta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbum()).compareTo(other.isSetAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.album, other.album);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtista()).compareTo(other.isSetArtista());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtista()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artista, other.artista);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuracion()).compareTo(other.isSetDuracion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuracion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duracion, other.duracion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CancionSl(");
    boolean first = true;

    sb.append("idCancion:");
    sb.append(this.idCancion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("titulo:");
    if (this.titulo == null) {
      sb.append("null");
    } else {
      sb.append(this.titulo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruta:");
    if (this.ruta == null) {
      sb.append("null");
    } else {
      sb.append(this.ruta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("album:");
    if (this.album == null) {
      sb.append("null");
    } else {
      sb.append(this.album);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("artista:");
    if (this.artista == null) {
      sb.append("null");
    } else {
      sb.append(this.artista);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("duracion:");
    sb.append(this.duracion);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CancionSlStandardSchemeFactory implements SchemeFactory {
    public CancionSlStandardScheme getScheme() {
      return new CancionSlStandardScheme();
    }
  }

  private static class CancionSlStandardScheme extends StandardScheme<CancionSl> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CancionSl struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_CANCION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idCancion = iprot.readI32();
              struct.setIdCancionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITULO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titulo = iprot.readString();
              struct.setTituloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RUTA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ruta = iprot.readString();
              struct.setRutaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.album = iprot.readString();
              struct.setAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARTISTA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.artista = iprot.readString();
              struct.setArtistaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DURACION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.duracion = iprot.readDouble();
              struct.setDuracionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CancionSl struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_CANCION_FIELD_DESC);
      oprot.writeI32(struct.idCancion);
      oprot.writeFieldEnd();
      if (struct.titulo != null) {
        oprot.writeFieldBegin(TITULO_FIELD_DESC);
        oprot.writeString(struct.titulo);
        oprot.writeFieldEnd();
      }
      if (struct.ruta != null) {
        oprot.writeFieldBegin(RUTA_FIELD_DESC);
        oprot.writeString(struct.ruta);
        oprot.writeFieldEnd();
      }
      if (struct.album != null) {
        oprot.writeFieldBegin(ALBUM_FIELD_DESC);
        oprot.writeString(struct.album);
        oprot.writeFieldEnd();
      }
      if (struct.artista != null) {
        oprot.writeFieldBegin(ARTISTA_FIELD_DESC);
        oprot.writeString(struct.artista);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DURACION_FIELD_DESC);
      oprot.writeDouble(struct.duracion);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CancionSlTupleSchemeFactory implements SchemeFactory {
    public CancionSlTupleScheme getScheme() {
      return new CancionSlTupleScheme();
    }
  }

  private static class CancionSlTupleScheme extends TupleScheme<CancionSl> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CancionSl struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdCancion()) {
        optionals.set(0);
      }
      if (struct.isSetTitulo()) {
        optionals.set(1);
      }
      if (struct.isSetRuta()) {
        optionals.set(2);
      }
      if (struct.isSetAlbum()) {
        optionals.set(3);
      }
      if (struct.isSetArtista()) {
        optionals.set(4);
      }
      if (struct.isSetDuracion()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetIdCancion()) {
        oprot.writeI32(struct.idCancion);
      }
      if (struct.isSetTitulo()) {
        oprot.writeString(struct.titulo);
      }
      if (struct.isSetRuta()) {
        oprot.writeString(struct.ruta);
      }
      if (struct.isSetAlbum()) {
        oprot.writeString(struct.album);
      }
      if (struct.isSetArtista()) {
        oprot.writeString(struct.artista);
      }
      if (struct.isSetDuracion()) {
        oprot.writeDouble(struct.duracion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CancionSl struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.idCancion = iprot.readI32();
        struct.setIdCancionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.titulo = iprot.readString();
        struct.setTituloIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ruta = iprot.readString();
        struct.setRutaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.album = iprot.readString();
        struct.setAlbumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.artista = iprot.readString();
        struct.setArtistaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.duracion = iprot.readDouble();
        struct.setDuracionIsSet(true);
      }
    }
  }

}

