/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-17")
public class servicios {

  public interface Iface {

    public java.util.List<CancionSL> obtenerCancionesFiltradas(java.lang.String criterio) throws org.apache.thrift.TException;

    public Consumidor obtenerConsumidor(java.lang.String correo) throws org.apache.thrift.TException;

    public Artista obtenerArtista(java.lang.String correo) throws org.apache.thrift.TException;

    public boolean insertarConsumidor(Consumidor consumidor) throws org.apache.thrift.TException;

    public boolean insertarArtista(Artista artista) throws org.apache.thrift.TException;

    public java.util.List<CancionSL> obtenerCancionesBiblioteca(java.lang.String correo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void obtenerCancionesFiltradas(java.lang.String criterio, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler) throws org.apache.thrift.TException;

    public void obtenerConsumidor(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<Consumidor> resultHandler) throws org.apache.thrift.TException;

    public void obtenerArtista(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<Artista> resultHandler) throws org.apache.thrift.TException;

    public void insertarConsumidor(Consumidor consumidor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void insertarArtista(Artista artista, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void obtenerCancionesBiblioteca(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<CancionSL> obtenerCancionesFiltradas(java.lang.String criterio) throws org.apache.thrift.TException
    {
      send_obtenerCancionesFiltradas(criterio);
      return recv_obtenerCancionesFiltradas();
    }

    public void send_obtenerCancionesFiltradas(java.lang.String criterio) throws org.apache.thrift.TException
    {
      obtenerCancionesFiltradas_args args = new obtenerCancionesFiltradas_args();
      args.setCriterio(criterio);
      sendBase("obtenerCancionesFiltradas", args);
    }

    public java.util.List<CancionSL> recv_obtenerCancionesFiltradas() throws org.apache.thrift.TException
    {
      obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
      receiveBase(result, "obtenerCancionesFiltradas");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerCancionesFiltradas failed: unknown result");
    }

    public Consumidor obtenerConsumidor(java.lang.String correo) throws org.apache.thrift.TException
    {
      send_obtenerConsumidor(correo);
      return recv_obtenerConsumidor();
    }

    public void send_obtenerConsumidor(java.lang.String correo) throws org.apache.thrift.TException
    {
      obtenerConsumidor_args args = new obtenerConsumidor_args();
      args.setCorreo(correo);
      sendBase("obtenerConsumidor", args);
    }

    public Consumidor recv_obtenerConsumidor() throws org.apache.thrift.TException
    {
      obtenerConsumidor_result result = new obtenerConsumidor_result();
      receiveBase(result, "obtenerConsumidor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerConsumidor failed: unknown result");
    }

    public Artista obtenerArtista(java.lang.String correo) throws org.apache.thrift.TException
    {
      send_obtenerArtista(correo);
      return recv_obtenerArtista();
    }

    public void send_obtenerArtista(java.lang.String correo) throws org.apache.thrift.TException
    {
      obtenerArtista_args args = new obtenerArtista_args();
      args.setCorreo(correo);
      sendBase("obtenerArtista", args);
    }

    public Artista recv_obtenerArtista() throws org.apache.thrift.TException
    {
      obtenerArtista_result result = new obtenerArtista_result();
      receiveBase(result, "obtenerArtista");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerArtista failed: unknown result");
    }

    public boolean insertarConsumidor(Consumidor consumidor) throws org.apache.thrift.TException
    {
      send_insertarConsumidor(consumidor);
      return recv_insertarConsumidor();
    }

    public void send_insertarConsumidor(Consumidor consumidor) throws org.apache.thrift.TException
    {
      insertarConsumidor_args args = new insertarConsumidor_args();
      args.setConsumidor(consumidor);
      sendBase("insertarConsumidor", args);
    }

    public boolean recv_insertarConsumidor() throws org.apache.thrift.TException
    {
      insertarConsumidor_result result = new insertarConsumidor_result();
      receiveBase(result, "insertarConsumidor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertarConsumidor failed: unknown result");
    }

    public boolean insertarArtista(Artista artista) throws org.apache.thrift.TException
    {
      send_insertarArtista(artista);
      return recv_insertarArtista();
    }

    public void send_insertarArtista(Artista artista) throws org.apache.thrift.TException
    {
      insertarArtista_args args = new insertarArtista_args();
      args.setArtista(artista);
      sendBase("insertarArtista", args);
    }

    public boolean recv_insertarArtista() throws org.apache.thrift.TException
    {
      insertarArtista_result result = new insertarArtista_result();
      receiveBase(result, "insertarArtista");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertarArtista failed: unknown result");
    }

    public java.util.List<CancionSL> obtenerCancionesBiblioteca(java.lang.String correo) throws org.apache.thrift.TException
    {
      send_obtenerCancionesBiblioteca(correo);
      return recv_obtenerCancionesBiblioteca();
    }

    public void send_obtenerCancionesBiblioteca(java.lang.String correo) throws org.apache.thrift.TException
    {
      obtenerCancionesBiblioteca_args args = new obtenerCancionesBiblioteca_args();
      args.setCorreo(correo);
      sendBase("obtenerCancionesBiblioteca", args);
    }

    public java.util.List<CancionSL> recv_obtenerCancionesBiblioteca() throws org.apache.thrift.TException
    {
      obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
      receiveBase(result, "obtenerCancionesBiblioteca");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerCancionesBiblioteca failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void obtenerCancionesFiltradas(java.lang.String criterio, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerCancionesFiltradas_call method_call = new obtenerCancionesFiltradas_call(criterio, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerCancionesFiltradas_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CancionSL>> {
      private java.lang.String criterio;
      public obtenerCancionesFiltradas_call(java.lang.String criterio, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.criterio = criterio;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerCancionesFiltradas", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerCancionesFiltradas_args args = new obtenerCancionesFiltradas_args();
        args.setCriterio(criterio);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CancionSL> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerCancionesFiltradas();
      }
    }

    public void obtenerConsumidor(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<Consumidor> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerConsumidor_call method_call = new obtenerConsumidor_call(correo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerConsumidor_call extends org.apache.thrift.async.TAsyncMethodCall<Consumidor> {
      private java.lang.String correo;
      public obtenerConsumidor_call(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<Consumidor> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.correo = correo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerConsumidor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerConsumidor_args args = new obtenerConsumidor_args();
        args.setCorreo(correo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Consumidor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerConsumidor();
      }
    }

    public void obtenerArtista(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<Artista> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerArtista_call method_call = new obtenerArtista_call(correo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerArtista_call extends org.apache.thrift.async.TAsyncMethodCall<Artista> {
      private java.lang.String correo;
      public obtenerArtista_call(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<Artista> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.correo = correo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerArtista", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerArtista_args args = new obtenerArtista_args();
        args.setCorreo(correo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Artista getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerArtista();
      }
    }

    public void insertarConsumidor(Consumidor consumidor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertarConsumidor_call method_call = new insertarConsumidor_call(consumidor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertarConsumidor_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Consumidor consumidor;
      public insertarConsumidor_call(Consumidor consumidor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.consumidor = consumidor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertarConsumidor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertarConsumidor_args args = new insertarConsumidor_args();
        args.setConsumidor(consumidor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertarConsumidor();
      }
    }

    public void insertarArtista(Artista artista, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertarArtista_call method_call = new insertarArtista_call(artista, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertarArtista_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Artista artista;
      public insertarArtista_call(Artista artista, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.artista = artista;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertarArtista", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertarArtista_args args = new insertarArtista_args();
        args.setArtista(artista);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertarArtista();
      }
    }

    public void obtenerCancionesBiblioteca(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerCancionesBiblioteca_call method_call = new obtenerCancionesBiblioteca_call(correo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerCancionesBiblioteca_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CancionSL>> {
      private java.lang.String correo;
      public obtenerCancionesBiblioteca_call(java.lang.String correo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.correo = correo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerCancionesBiblioteca", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerCancionesBiblioteca_args args = new obtenerCancionesBiblioteca_args();
        args.setCorreo(correo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CancionSL> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerCancionesBiblioteca();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("obtenerCancionesFiltradas", new obtenerCancionesFiltradas());
      processMap.put("obtenerConsumidor", new obtenerConsumidor());
      processMap.put("obtenerArtista", new obtenerArtista());
      processMap.put("insertarConsumidor", new insertarConsumidor());
      processMap.put("insertarArtista", new insertarArtista());
      processMap.put("obtenerCancionesBiblioteca", new obtenerCancionesBiblioteca());
      return processMap;
    }

    public static class obtenerCancionesFiltradas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerCancionesFiltradas_args> {
      public obtenerCancionesFiltradas() {
        super("obtenerCancionesFiltradas");
      }

      public obtenerCancionesFiltradas_args getEmptyArgsInstance() {
        return new obtenerCancionesFiltradas_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public obtenerCancionesFiltradas_result getResult(I iface, obtenerCancionesFiltradas_args args) throws org.apache.thrift.TException {
        obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
        result.success = iface.obtenerCancionesFiltradas(args.criterio);
        return result;
      }
    }

    public static class obtenerConsumidor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerConsumidor_args> {
      public obtenerConsumidor() {
        super("obtenerConsumidor");
      }

      public obtenerConsumidor_args getEmptyArgsInstance() {
        return new obtenerConsumidor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public obtenerConsumidor_result getResult(I iface, obtenerConsumidor_args args) throws org.apache.thrift.TException {
        obtenerConsumidor_result result = new obtenerConsumidor_result();
        result.success = iface.obtenerConsumidor(args.correo);
        return result;
      }
    }

    public static class obtenerArtista<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerArtista_args> {
      public obtenerArtista() {
        super("obtenerArtista");
      }

      public obtenerArtista_args getEmptyArgsInstance() {
        return new obtenerArtista_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public obtenerArtista_result getResult(I iface, obtenerArtista_args args) throws org.apache.thrift.TException {
        obtenerArtista_result result = new obtenerArtista_result();
        result.success = iface.obtenerArtista(args.correo);
        return result;
      }
    }

    public static class insertarConsumidor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertarConsumidor_args> {
      public insertarConsumidor() {
        super("insertarConsumidor");
      }

      public insertarConsumidor_args getEmptyArgsInstance() {
        return new insertarConsumidor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public insertarConsumidor_result getResult(I iface, insertarConsumidor_args args) throws org.apache.thrift.TException {
        insertarConsumidor_result result = new insertarConsumidor_result();
        result.success = iface.insertarConsumidor(args.consumidor);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class insertarArtista<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertarArtista_args> {
      public insertarArtista() {
        super("insertarArtista");
      }

      public insertarArtista_args getEmptyArgsInstance() {
        return new insertarArtista_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public insertarArtista_result getResult(I iface, insertarArtista_args args) throws org.apache.thrift.TException {
        insertarArtista_result result = new insertarArtista_result();
        result.success = iface.insertarArtista(args.artista);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class obtenerCancionesBiblioteca<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerCancionesBiblioteca_args> {
      public obtenerCancionesBiblioteca() {
        super("obtenerCancionesBiblioteca");
      }

      public obtenerCancionesBiblioteca_args getEmptyArgsInstance() {
        return new obtenerCancionesBiblioteca_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public obtenerCancionesBiblioteca_result getResult(I iface, obtenerCancionesBiblioteca_args args) throws org.apache.thrift.TException {
        obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
        result.success = iface.obtenerCancionesBiblioteca(args.correo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("obtenerCancionesFiltradas", new obtenerCancionesFiltradas());
      processMap.put("obtenerConsumidor", new obtenerConsumidor());
      processMap.put("obtenerArtista", new obtenerArtista());
      processMap.put("insertarConsumidor", new insertarConsumidor());
      processMap.put("insertarArtista", new insertarArtista());
      processMap.put("obtenerCancionesBiblioteca", new obtenerCancionesBiblioteca());
      return processMap;
    }

    public static class obtenerCancionesFiltradas<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerCancionesFiltradas_args, java.util.List<CancionSL>> {
      public obtenerCancionesFiltradas() {
        super("obtenerCancionesFiltradas");
      }

      public obtenerCancionesFiltradas_args getEmptyArgsInstance() {
        return new obtenerCancionesFiltradas_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>>() { 
          public void onComplete(java.util.List<CancionSL> o) {
            obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerCancionesFiltradas_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerCancionesFiltradas(args.criterio,resultHandler);
      }
    }

    public static class obtenerConsumidor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerConsumidor_args, Consumidor> {
      public obtenerConsumidor() {
        super("obtenerConsumidor");
      }

      public obtenerConsumidor_args getEmptyArgsInstance() {
        return new obtenerConsumidor_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Consumidor> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Consumidor>() { 
          public void onComplete(Consumidor o) {
            obtenerConsumidor_result result = new obtenerConsumidor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerConsumidor_result result = new obtenerConsumidor_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerConsumidor_args args, org.apache.thrift.async.AsyncMethodCallback<Consumidor> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerConsumidor(args.correo,resultHandler);
      }
    }

    public static class obtenerArtista<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerArtista_args, Artista> {
      public obtenerArtista() {
        super("obtenerArtista");
      }

      public obtenerArtista_args getEmptyArgsInstance() {
        return new obtenerArtista_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Artista> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Artista>() { 
          public void onComplete(Artista o) {
            obtenerArtista_result result = new obtenerArtista_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerArtista_result result = new obtenerArtista_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerArtista_args args, org.apache.thrift.async.AsyncMethodCallback<Artista> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerArtista(args.correo,resultHandler);
      }
    }

    public static class insertarConsumidor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertarConsumidor_args, java.lang.Boolean> {
      public insertarConsumidor() {
        super("insertarConsumidor");
      }

      public insertarConsumidor_args getEmptyArgsInstance() {
        return new insertarConsumidor_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            insertarConsumidor_result result = new insertarConsumidor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            insertarConsumidor_result result = new insertarConsumidor_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertarConsumidor_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.insertarConsumidor(args.consumidor,resultHandler);
      }
    }

    public static class insertarArtista<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertarArtista_args, java.lang.Boolean> {
      public insertarArtista() {
        super("insertarArtista");
      }

      public insertarArtista_args getEmptyArgsInstance() {
        return new insertarArtista_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            insertarArtista_result result = new insertarArtista_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            insertarArtista_result result = new insertarArtista_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertarArtista_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.insertarArtista(args.artista,resultHandler);
      }
    }

    public static class obtenerCancionesBiblioteca<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerCancionesBiblioteca_args, java.util.List<CancionSL>> {
      public obtenerCancionesBiblioteca() {
        super("obtenerCancionesBiblioteca");
      }

      public obtenerCancionesBiblioteca_args getEmptyArgsInstance() {
        return new obtenerCancionesBiblioteca_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>>() { 
          public void onComplete(java.util.List<CancionSL> o) {
            obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerCancionesBiblioteca_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CancionSL>> resultHandler) throws org.apache.thrift.TException {
        iface.obtenerCancionesBiblioteca(args.correo,resultHandler);
      }
    }

  }

  public static class obtenerCancionesFiltradas_args implements org.apache.thrift.TBase<obtenerCancionesFiltradas_args, obtenerCancionesFiltradas_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesFiltradas_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesFiltradas_args");

    private static final org.apache.thrift.protocol.TField CRITERIO_FIELD_DESC = new org.apache.thrift.protocol.TField("criterio", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerCancionesFiltradas_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerCancionesFiltradas_argsTupleSchemeFactory();

    public java.lang.String criterio; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRITERIO((short)1, "criterio");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRITERIO
            return CRITERIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRITERIO, new org.apache.thrift.meta_data.FieldMetaData("criterio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesFiltradas_args.class, metaDataMap);
    }

    public obtenerCancionesFiltradas_args() {
    }

    public obtenerCancionesFiltradas_args(
      java.lang.String criterio)
    {
      this();
      this.criterio = criterio;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesFiltradas_args(obtenerCancionesFiltradas_args other) {
      if (other.isSetCriterio()) {
        this.criterio = other.criterio;
      }
    }

    public obtenerCancionesFiltradas_args deepCopy() {
      return new obtenerCancionesFiltradas_args(this);
    }

    @Override
    public void clear() {
      this.criterio = null;
    }

    public java.lang.String getCriterio() {
      return this.criterio;
    }

    public obtenerCancionesFiltradas_args setCriterio(java.lang.String criterio) {
      this.criterio = criterio;
      return this;
    }

    public void unsetCriterio() {
      this.criterio = null;
    }

    /** Returns true if field criterio is set (has been assigned a value) and false otherwise */
    public boolean isSetCriterio() {
      return this.criterio != null;
    }

    public void setCriterioIsSet(boolean value) {
      if (!value) {
        this.criterio = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CRITERIO:
        if (value == null) {
          unsetCriterio();
        } else {
          setCriterio((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CRITERIO:
        return getCriterio();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CRITERIO:
        return isSetCriterio();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesFiltradas_args)
        return this.equals((obtenerCancionesFiltradas_args)that);
      return false;
    }

    public boolean equals(obtenerCancionesFiltradas_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_criterio = true && this.isSetCriterio();
      boolean that_present_criterio = true && that.isSetCriterio();
      if (this_present_criterio || that_present_criterio) {
        if (!(this_present_criterio && that_present_criterio))
          return false;
        if (!this.criterio.equals(that.criterio))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCriterio()) ? 131071 : 524287);
      if (isSetCriterio())
        hashCode = hashCode * 8191 + criterio.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerCancionesFiltradas_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCriterio()).compareTo(other.isSetCriterio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCriterio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.criterio, other.criterio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerCancionesFiltradas_args(");
      boolean first = true;

      sb.append("criterio:");
      if (this.criterio == null) {
        sb.append("null");
      } else {
        sb.append(this.criterio);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesFiltradas_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesFiltradas_argsStandardScheme getScheme() {
        return new obtenerCancionesFiltradas_argsStandardScheme();
      }
    }

    private static class obtenerCancionesFiltradas_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerCancionesFiltradas_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRITERIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.criterio = iprot.readString();
                struct.setCriterioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.criterio != null) {
          oprot.writeFieldBegin(CRITERIO_FIELD_DESC);
          oprot.writeString(struct.criterio);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesFiltradas_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesFiltradas_argsTupleScheme getScheme() {
        return new obtenerCancionesFiltradas_argsTupleScheme();
      }
    }

    private static class obtenerCancionesFiltradas_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerCancionesFiltradas_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCriterio()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCriterio()) {
          oprot.writeString(struct.criterio);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.criterio = iprot.readString();
          struct.setCriterioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerCancionesFiltradas_result implements org.apache.thrift.TBase<obtenerCancionesFiltradas_result, obtenerCancionesFiltradas_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesFiltradas_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesFiltradas_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerCancionesFiltradas_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerCancionesFiltradas_resultTupleSchemeFactory();

    public java.util.List<CancionSL> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancionSL.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesFiltradas_result.class, metaDataMap);
    }

    public obtenerCancionesFiltradas_result() {
    }

    public obtenerCancionesFiltradas_result(
      java.util.List<CancionSL> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesFiltradas_result(obtenerCancionesFiltradas_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CancionSL> __this__success = new java.util.ArrayList<CancionSL>(other.success.size());
        for (CancionSL other_element : other.success) {
          __this__success.add(new CancionSL(other_element));
        }
        this.success = __this__success;
      }
    }

    public obtenerCancionesFiltradas_result deepCopy() {
      return new obtenerCancionesFiltradas_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CancionSL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CancionSL elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CancionSL>();
      }
      this.success.add(elem);
    }

    public java.util.List<CancionSL> getSuccess() {
      return this.success;
    }

    public obtenerCancionesFiltradas_result setSuccess(java.util.List<CancionSL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CancionSL>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesFiltradas_result)
        return this.equals((obtenerCancionesFiltradas_result)that);
      return false;
    }

    public boolean equals(obtenerCancionesFiltradas_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerCancionesFiltradas_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerCancionesFiltradas_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesFiltradas_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesFiltradas_resultStandardScheme getScheme() {
        return new obtenerCancionesFiltradas_resultStandardScheme();
      }
    }

    private static class obtenerCancionesFiltradas_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerCancionesFiltradas_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CancionSL>(_list0.size);
                  CancionSL _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new CancionSL();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CancionSL _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesFiltradas_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesFiltradas_resultTupleScheme getScheme() {
        return new obtenerCancionesFiltradas_resultTupleScheme();
      }
    }

    private static class obtenerCancionesFiltradas_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerCancionesFiltradas_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CancionSL _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CancionSL>(_list5.size);
            CancionSL _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new CancionSL();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerConsumidor_args implements org.apache.thrift.TBase<obtenerConsumidor_args, obtenerConsumidor_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerConsumidor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerConsumidor_args");

    private static final org.apache.thrift.protocol.TField CORREO_FIELD_DESC = new org.apache.thrift.protocol.TField("correo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerConsumidor_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerConsumidor_argsTupleSchemeFactory();

    public java.lang.String correo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CORREO((short)1, "correo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CORREO
            return CORREO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CORREO, new org.apache.thrift.meta_data.FieldMetaData("correo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerConsumidor_args.class, metaDataMap);
    }

    public obtenerConsumidor_args() {
    }

    public obtenerConsumidor_args(
      java.lang.String correo)
    {
      this();
      this.correo = correo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerConsumidor_args(obtenerConsumidor_args other) {
      if (other.isSetCorreo()) {
        this.correo = other.correo;
      }
    }

    public obtenerConsumidor_args deepCopy() {
      return new obtenerConsumidor_args(this);
    }

    @Override
    public void clear() {
      this.correo = null;
    }

    public java.lang.String getCorreo() {
      return this.correo;
    }

    public obtenerConsumidor_args setCorreo(java.lang.String correo) {
      this.correo = correo;
      return this;
    }

    public void unsetCorreo() {
      this.correo = null;
    }

    /** Returns true if field correo is set (has been assigned a value) and false otherwise */
    public boolean isSetCorreo() {
      return this.correo != null;
    }

    public void setCorreoIsSet(boolean value) {
      if (!value) {
        this.correo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CORREO:
        if (value == null) {
          unsetCorreo();
        } else {
          setCorreo((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CORREO:
        return getCorreo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CORREO:
        return isSetCorreo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerConsumidor_args)
        return this.equals((obtenerConsumidor_args)that);
      return false;
    }

    public boolean equals(obtenerConsumidor_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_correo = true && this.isSetCorreo();
      boolean that_present_correo = true && that.isSetCorreo();
      if (this_present_correo || that_present_correo) {
        if (!(this_present_correo && that_present_correo))
          return false;
        if (!this.correo.equals(that.correo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCorreo()) ? 131071 : 524287);
      if (isSetCorreo())
        hashCode = hashCode * 8191 + correo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerConsumidor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCorreo()).compareTo(other.isSetCorreo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCorreo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correo, other.correo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerConsumidor_args(");
      boolean first = true;

      sb.append("correo:");
      if (this.correo == null) {
        sb.append("null");
      } else {
        sb.append(this.correo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerConsumidor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerConsumidor_argsStandardScheme getScheme() {
        return new obtenerConsumidor_argsStandardScheme();
      }
    }

    private static class obtenerConsumidor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerConsumidor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerConsumidor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CORREO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.correo = iprot.readString();
                struct.setCorreoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerConsumidor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.correo != null) {
          oprot.writeFieldBegin(CORREO_FIELD_DESC);
          oprot.writeString(struct.correo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerConsumidor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerConsumidor_argsTupleScheme getScheme() {
        return new obtenerConsumidor_argsTupleScheme();
      }
    }

    private static class obtenerConsumidor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerConsumidor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerConsumidor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCorreo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCorreo()) {
          oprot.writeString(struct.correo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerConsumidor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.correo = iprot.readString();
          struct.setCorreoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerConsumidor_result implements org.apache.thrift.TBase<obtenerConsumidor_result, obtenerConsumidor_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerConsumidor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerConsumidor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerConsumidor_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerConsumidor_resultTupleSchemeFactory();

    public Consumidor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Consumidor.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerConsumidor_result.class, metaDataMap);
    }

    public obtenerConsumidor_result() {
    }

    public obtenerConsumidor_result(
      Consumidor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerConsumidor_result(obtenerConsumidor_result other) {
      if (other.isSetSuccess()) {
        this.success = new Consumidor(other.success);
      }
    }

    public obtenerConsumidor_result deepCopy() {
      return new obtenerConsumidor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Consumidor getSuccess() {
      return this.success;
    }

    public obtenerConsumidor_result setSuccess(Consumidor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Consumidor)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerConsumidor_result)
        return this.equals((obtenerConsumidor_result)that);
      return false;
    }

    public boolean equals(obtenerConsumidor_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerConsumidor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerConsumidor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerConsumidor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerConsumidor_resultStandardScheme getScheme() {
        return new obtenerConsumidor_resultStandardScheme();
      }
    }

    private static class obtenerConsumidor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerConsumidor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerConsumidor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Consumidor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerConsumidor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerConsumidor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerConsumidor_resultTupleScheme getScheme() {
        return new obtenerConsumidor_resultTupleScheme();
      }
    }

    private static class obtenerConsumidor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerConsumidor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerConsumidor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerConsumidor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Consumidor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerArtista_args implements org.apache.thrift.TBase<obtenerArtista_args, obtenerArtista_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerArtista_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerArtista_args");

    private static final org.apache.thrift.protocol.TField CORREO_FIELD_DESC = new org.apache.thrift.protocol.TField("correo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerArtista_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerArtista_argsTupleSchemeFactory();

    public java.lang.String correo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CORREO((short)1, "correo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CORREO
            return CORREO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CORREO, new org.apache.thrift.meta_data.FieldMetaData("correo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerArtista_args.class, metaDataMap);
    }

    public obtenerArtista_args() {
    }

    public obtenerArtista_args(
      java.lang.String correo)
    {
      this();
      this.correo = correo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerArtista_args(obtenerArtista_args other) {
      if (other.isSetCorreo()) {
        this.correo = other.correo;
      }
    }

    public obtenerArtista_args deepCopy() {
      return new obtenerArtista_args(this);
    }

    @Override
    public void clear() {
      this.correo = null;
    }

    public java.lang.String getCorreo() {
      return this.correo;
    }

    public obtenerArtista_args setCorreo(java.lang.String correo) {
      this.correo = correo;
      return this;
    }

    public void unsetCorreo() {
      this.correo = null;
    }

    /** Returns true if field correo is set (has been assigned a value) and false otherwise */
    public boolean isSetCorreo() {
      return this.correo != null;
    }

    public void setCorreoIsSet(boolean value) {
      if (!value) {
        this.correo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CORREO:
        if (value == null) {
          unsetCorreo();
        } else {
          setCorreo((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CORREO:
        return getCorreo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CORREO:
        return isSetCorreo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerArtista_args)
        return this.equals((obtenerArtista_args)that);
      return false;
    }

    public boolean equals(obtenerArtista_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_correo = true && this.isSetCorreo();
      boolean that_present_correo = true && that.isSetCorreo();
      if (this_present_correo || that_present_correo) {
        if (!(this_present_correo && that_present_correo))
          return false;
        if (!this.correo.equals(that.correo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCorreo()) ? 131071 : 524287);
      if (isSetCorreo())
        hashCode = hashCode * 8191 + correo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerArtista_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCorreo()).compareTo(other.isSetCorreo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCorreo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correo, other.correo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerArtista_args(");
      boolean first = true;

      sb.append("correo:");
      if (this.correo == null) {
        sb.append("null");
      } else {
        sb.append(this.correo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerArtista_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerArtista_argsStandardScheme getScheme() {
        return new obtenerArtista_argsStandardScheme();
      }
    }

    private static class obtenerArtista_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerArtista_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerArtista_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CORREO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.correo = iprot.readString();
                struct.setCorreoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerArtista_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.correo != null) {
          oprot.writeFieldBegin(CORREO_FIELD_DESC);
          oprot.writeString(struct.correo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerArtista_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerArtista_argsTupleScheme getScheme() {
        return new obtenerArtista_argsTupleScheme();
      }
    }

    private static class obtenerArtista_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerArtista_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerArtista_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCorreo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCorreo()) {
          oprot.writeString(struct.correo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerArtista_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.correo = iprot.readString();
          struct.setCorreoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerArtista_result implements org.apache.thrift.TBase<obtenerArtista_result, obtenerArtista_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerArtista_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerArtista_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerArtista_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerArtista_resultTupleSchemeFactory();

    public Artista success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Artista.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerArtista_result.class, metaDataMap);
    }

    public obtenerArtista_result() {
    }

    public obtenerArtista_result(
      Artista success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerArtista_result(obtenerArtista_result other) {
      if (other.isSetSuccess()) {
        this.success = new Artista(other.success);
      }
    }

    public obtenerArtista_result deepCopy() {
      return new obtenerArtista_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Artista getSuccess() {
      return this.success;
    }

    public obtenerArtista_result setSuccess(Artista success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Artista)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerArtista_result)
        return this.equals((obtenerArtista_result)that);
      return false;
    }

    public boolean equals(obtenerArtista_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerArtista_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerArtista_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerArtista_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerArtista_resultStandardScheme getScheme() {
        return new obtenerArtista_resultStandardScheme();
      }
    }

    private static class obtenerArtista_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerArtista_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerArtista_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Artista();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerArtista_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerArtista_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerArtista_resultTupleScheme getScheme() {
        return new obtenerArtista_resultTupleScheme();
      }
    }

    private static class obtenerArtista_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerArtista_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerArtista_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerArtista_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Artista();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertarConsumidor_args implements org.apache.thrift.TBase<insertarConsumidor_args, insertarConsumidor_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertarConsumidor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertarConsumidor_args");

    private static final org.apache.thrift.protocol.TField CONSUMIDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("consumidor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertarConsumidor_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertarConsumidor_argsTupleSchemeFactory();

    public Consumidor consumidor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONSUMIDOR((short)1, "consumidor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONSUMIDOR
            return CONSUMIDOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONSUMIDOR, new org.apache.thrift.meta_data.FieldMetaData("consumidor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Consumidor.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertarConsumidor_args.class, metaDataMap);
    }

    public insertarConsumidor_args() {
    }

    public insertarConsumidor_args(
      Consumidor consumidor)
    {
      this();
      this.consumidor = consumidor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertarConsumidor_args(insertarConsumidor_args other) {
      if (other.isSetConsumidor()) {
        this.consumidor = new Consumidor(other.consumidor);
      }
    }

    public insertarConsumidor_args deepCopy() {
      return new insertarConsumidor_args(this);
    }

    @Override
    public void clear() {
      this.consumidor = null;
    }

    public Consumidor getConsumidor() {
      return this.consumidor;
    }

    public insertarConsumidor_args setConsumidor(Consumidor consumidor) {
      this.consumidor = consumidor;
      return this;
    }

    public void unsetConsumidor() {
      this.consumidor = null;
    }

    /** Returns true if field consumidor is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumidor() {
      return this.consumidor != null;
    }

    public void setConsumidorIsSet(boolean value) {
      if (!value) {
        this.consumidor = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONSUMIDOR:
        if (value == null) {
          unsetConsumidor();
        } else {
          setConsumidor((Consumidor)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONSUMIDOR:
        return getConsumidor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONSUMIDOR:
        return isSetConsumidor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof insertarConsumidor_args)
        return this.equals((insertarConsumidor_args)that);
      return false;
    }

    public boolean equals(insertarConsumidor_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_consumidor = true && this.isSetConsumidor();
      boolean that_present_consumidor = true && that.isSetConsumidor();
      if (this_present_consumidor || that_present_consumidor) {
        if (!(this_present_consumidor && that_present_consumidor))
          return false;
        if (!this.consumidor.equals(that.consumidor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConsumidor()) ? 131071 : 524287);
      if (isSetConsumidor())
        hashCode = hashCode * 8191 + consumidor.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(insertarConsumidor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConsumidor()).compareTo(other.isSetConsumidor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumidor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumidor, other.consumidor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("insertarConsumidor_args(");
      boolean first = true;

      sb.append("consumidor:");
      if (this.consumidor == null) {
        sb.append("null");
      } else {
        sb.append(this.consumidor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (consumidor != null) {
        consumidor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertarConsumidor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarConsumidor_argsStandardScheme getScheme() {
        return new insertarConsumidor_argsStandardScheme();
      }
    }

    private static class insertarConsumidor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertarConsumidor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertarConsumidor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONSUMIDOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.consumidor = new Consumidor();
                struct.consumidor.read(iprot);
                struct.setConsumidorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertarConsumidor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.consumidor != null) {
          oprot.writeFieldBegin(CONSUMIDOR_FIELD_DESC);
          struct.consumidor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertarConsumidor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarConsumidor_argsTupleScheme getScheme() {
        return new insertarConsumidor_argsTupleScheme();
      }
    }

    private static class insertarConsumidor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertarConsumidor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertarConsumidor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConsumidor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConsumidor()) {
          struct.consumidor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertarConsumidor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.consumidor = new Consumidor();
          struct.consumidor.read(iprot);
          struct.setConsumidorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertarConsumidor_result implements org.apache.thrift.TBase<insertarConsumidor_result, insertarConsumidor_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertarConsumidor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertarConsumidor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertarConsumidor_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertarConsumidor_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertarConsumidor_result.class, metaDataMap);
    }

    public insertarConsumidor_result() {
    }

    public insertarConsumidor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertarConsumidor_result(insertarConsumidor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertarConsumidor_result deepCopy() {
      return new insertarConsumidor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public insertarConsumidor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof insertarConsumidor_result)
        return this.equals((insertarConsumidor_result)that);
      return false;
    }

    public boolean equals(insertarConsumidor_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(insertarConsumidor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("insertarConsumidor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertarConsumidor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarConsumidor_resultStandardScheme getScheme() {
        return new insertarConsumidor_resultStandardScheme();
      }
    }

    private static class insertarConsumidor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertarConsumidor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertarConsumidor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertarConsumidor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertarConsumidor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarConsumidor_resultTupleScheme getScheme() {
        return new insertarConsumidor_resultTupleScheme();
      }
    }

    private static class insertarConsumidor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertarConsumidor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertarConsumidor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertarConsumidor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertarArtista_args implements org.apache.thrift.TBase<insertarArtista_args, insertarArtista_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertarArtista_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertarArtista_args");

    private static final org.apache.thrift.protocol.TField ARTISTA_FIELD_DESC = new org.apache.thrift.protocol.TField("artista", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertarArtista_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertarArtista_argsTupleSchemeFactory();

    public Artista artista; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARTISTA((short)1, "artista");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARTISTA
            return ARTISTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARTISTA, new org.apache.thrift.meta_data.FieldMetaData("artista", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Artista.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertarArtista_args.class, metaDataMap);
    }

    public insertarArtista_args() {
    }

    public insertarArtista_args(
      Artista artista)
    {
      this();
      this.artista = artista;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertarArtista_args(insertarArtista_args other) {
      if (other.isSetArtista()) {
        this.artista = new Artista(other.artista);
      }
    }

    public insertarArtista_args deepCopy() {
      return new insertarArtista_args(this);
    }

    @Override
    public void clear() {
      this.artista = null;
    }

    public Artista getArtista() {
      return this.artista;
    }

    public insertarArtista_args setArtista(Artista artista) {
      this.artista = artista;
      return this;
    }

    public void unsetArtista() {
      this.artista = null;
    }

    /** Returns true if field artista is set (has been assigned a value) and false otherwise */
    public boolean isSetArtista() {
      return this.artista != null;
    }

    public void setArtistaIsSet(boolean value) {
      if (!value) {
        this.artista = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ARTISTA:
        if (value == null) {
          unsetArtista();
        } else {
          setArtista((Artista)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ARTISTA:
        return getArtista();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ARTISTA:
        return isSetArtista();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof insertarArtista_args)
        return this.equals((insertarArtista_args)that);
      return false;
    }

    public boolean equals(insertarArtista_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_artista = true && this.isSetArtista();
      boolean that_present_artista = true && that.isSetArtista();
      if (this_present_artista || that_present_artista) {
        if (!(this_present_artista && that_present_artista))
          return false;
        if (!this.artista.equals(that.artista))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArtista()) ? 131071 : 524287);
      if (isSetArtista())
        hashCode = hashCode * 8191 + artista.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(insertarArtista_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetArtista()).compareTo(other.isSetArtista());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArtista()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artista, other.artista);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("insertarArtista_args(");
      boolean first = true;

      sb.append("artista:");
      if (this.artista == null) {
        sb.append("null");
      } else {
        sb.append(this.artista);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (artista != null) {
        artista.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertarArtista_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarArtista_argsStandardScheme getScheme() {
        return new insertarArtista_argsStandardScheme();
      }
    }

    private static class insertarArtista_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertarArtista_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertarArtista_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARTISTA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.artista = new Artista();
                struct.artista.read(iprot);
                struct.setArtistaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertarArtista_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.artista != null) {
          oprot.writeFieldBegin(ARTISTA_FIELD_DESC);
          struct.artista.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertarArtista_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarArtista_argsTupleScheme getScheme() {
        return new insertarArtista_argsTupleScheme();
      }
    }

    private static class insertarArtista_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertarArtista_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertarArtista_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArtista()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArtista()) {
          struct.artista.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertarArtista_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.artista = new Artista();
          struct.artista.read(iprot);
          struct.setArtistaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertarArtista_result implements org.apache.thrift.TBase<insertarArtista_result, insertarArtista_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertarArtista_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertarArtista_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertarArtista_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertarArtista_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertarArtista_result.class, metaDataMap);
    }

    public insertarArtista_result() {
    }

    public insertarArtista_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertarArtista_result(insertarArtista_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertarArtista_result deepCopy() {
      return new insertarArtista_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public insertarArtista_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof insertarArtista_result)
        return this.equals((insertarArtista_result)that);
      return false;
    }

    public boolean equals(insertarArtista_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(insertarArtista_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("insertarArtista_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertarArtista_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarArtista_resultStandardScheme getScheme() {
        return new insertarArtista_resultStandardScheme();
      }
    }

    private static class insertarArtista_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertarArtista_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertarArtista_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertarArtista_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertarArtista_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertarArtista_resultTupleScheme getScheme() {
        return new insertarArtista_resultTupleScheme();
      }
    }

    private static class insertarArtista_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertarArtista_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertarArtista_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertarArtista_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerCancionesBiblioteca_args implements org.apache.thrift.TBase<obtenerCancionesBiblioteca_args, obtenerCancionesBiblioteca_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesBiblioteca_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesBiblioteca_args");

    private static final org.apache.thrift.protocol.TField CORREO_FIELD_DESC = new org.apache.thrift.protocol.TField("correo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerCancionesBiblioteca_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerCancionesBiblioteca_argsTupleSchemeFactory();

    public java.lang.String correo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CORREO((short)1, "correo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CORREO
            return CORREO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CORREO, new org.apache.thrift.meta_data.FieldMetaData("correo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesBiblioteca_args.class, metaDataMap);
    }

    public obtenerCancionesBiblioteca_args() {
    }

    public obtenerCancionesBiblioteca_args(
      java.lang.String correo)
    {
      this();
      this.correo = correo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesBiblioteca_args(obtenerCancionesBiblioteca_args other) {
      if (other.isSetCorreo()) {
        this.correo = other.correo;
      }
    }

    public obtenerCancionesBiblioteca_args deepCopy() {
      return new obtenerCancionesBiblioteca_args(this);
    }

    @Override
    public void clear() {
      this.correo = null;
    }

    public java.lang.String getCorreo() {
      return this.correo;
    }

    public obtenerCancionesBiblioteca_args setCorreo(java.lang.String correo) {
      this.correo = correo;
      return this;
    }

    public void unsetCorreo() {
      this.correo = null;
    }

    /** Returns true if field correo is set (has been assigned a value) and false otherwise */
    public boolean isSetCorreo() {
      return this.correo != null;
    }

    public void setCorreoIsSet(boolean value) {
      if (!value) {
        this.correo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CORREO:
        if (value == null) {
          unsetCorreo();
        } else {
          setCorreo((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CORREO:
        return getCorreo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CORREO:
        return isSetCorreo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesBiblioteca_args)
        return this.equals((obtenerCancionesBiblioteca_args)that);
      return false;
    }

    public boolean equals(obtenerCancionesBiblioteca_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_correo = true && this.isSetCorreo();
      boolean that_present_correo = true && that.isSetCorreo();
      if (this_present_correo || that_present_correo) {
        if (!(this_present_correo && that_present_correo))
          return false;
        if (!this.correo.equals(that.correo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCorreo()) ? 131071 : 524287);
      if (isSetCorreo())
        hashCode = hashCode * 8191 + correo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerCancionesBiblioteca_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCorreo()).compareTo(other.isSetCorreo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCorreo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correo, other.correo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerCancionesBiblioteca_args(");
      boolean first = true;

      sb.append("correo:");
      if (this.correo == null) {
        sb.append("null");
      } else {
        sb.append(this.correo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesBiblioteca_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesBiblioteca_argsStandardScheme getScheme() {
        return new obtenerCancionesBiblioteca_argsStandardScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerCancionesBiblioteca_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CORREO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.correo = iprot.readString();
                struct.setCorreoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.correo != null) {
          oprot.writeFieldBegin(CORREO_FIELD_DESC);
          oprot.writeString(struct.correo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesBiblioteca_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesBiblioteca_argsTupleScheme getScheme() {
        return new obtenerCancionesBiblioteca_argsTupleScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerCancionesBiblioteca_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCorreo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCorreo()) {
          oprot.writeString(struct.correo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.correo = iprot.readString();
          struct.setCorreoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtenerCancionesBiblioteca_result implements org.apache.thrift.TBase<obtenerCancionesBiblioteca_result, obtenerCancionesBiblioteca_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesBiblioteca_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesBiblioteca_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtenerCancionesBiblioteca_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtenerCancionesBiblioteca_resultTupleSchemeFactory();

    public java.util.List<CancionSL> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancionSL.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesBiblioteca_result.class, metaDataMap);
    }

    public obtenerCancionesBiblioteca_result() {
    }

    public obtenerCancionesBiblioteca_result(
      java.util.List<CancionSL> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesBiblioteca_result(obtenerCancionesBiblioteca_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CancionSL> __this__success = new java.util.ArrayList<CancionSL>(other.success.size());
        for (CancionSL other_element : other.success) {
          __this__success.add(new CancionSL(other_element));
        }
        this.success = __this__success;
      }
    }

    public obtenerCancionesBiblioteca_result deepCopy() {
      return new obtenerCancionesBiblioteca_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CancionSL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CancionSL elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CancionSL>();
      }
      this.success.add(elem);
    }

    public java.util.List<CancionSL> getSuccess() {
      return this.success;
    }

    public obtenerCancionesBiblioteca_result setSuccess(java.util.List<CancionSL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CancionSL>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesBiblioteca_result)
        return this.equals((obtenerCancionesBiblioteca_result)that);
      return false;
    }

    public boolean equals(obtenerCancionesBiblioteca_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtenerCancionesBiblioteca_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtenerCancionesBiblioteca_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesBiblioteca_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesBiblioteca_resultStandardScheme getScheme() {
        return new obtenerCancionesBiblioteca_resultStandardScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtenerCancionesBiblioteca_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CancionSL>(_list8.size);
                  CancionSL _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new CancionSL();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CancionSL _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesBiblioteca_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtenerCancionesBiblioteca_resultTupleScheme getScheme() {
        return new obtenerCancionesBiblioteca_resultTupleScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtenerCancionesBiblioteca_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CancionSL _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CancionSL>(_list13.size);
            CancionSL _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new CancionSL();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
