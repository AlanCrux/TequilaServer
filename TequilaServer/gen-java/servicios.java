/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class servicios {

  public interface Iface {

    public List<CancionSL> obtenerCancionesFiltradas(String criterio) throws org.apache.thrift.TException;

    public Usuario obtenerUsuario(String correo) throws org.apache.thrift.TException;

    public boolean insertarUsuario(Usuario usuario) throws org.apache.thrift.TException;

    public List<CancionSL> obtenerCancionesBiblioteca(String correo) throws org.apache.thrift.TException;

    public ByteBuffer bajarCancion(String ruta) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void obtenerCancionesFiltradas(String criterio, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtenerUsuario(String correo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertarUsuario(Usuario usuario, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtenerCancionesBiblioteca(String correo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bajarCancion(String ruta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<CancionSL> obtenerCancionesFiltradas(String criterio) throws org.apache.thrift.TException
    {
      send_obtenerCancionesFiltradas(criterio);
      return recv_obtenerCancionesFiltradas();
    }

    public void send_obtenerCancionesFiltradas(String criterio) throws org.apache.thrift.TException
    {
      obtenerCancionesFiltradas_args args = new obtenerCancionesFiltradas_args();
      args.setCriterio(criterio);
      sendBase("obtenerCancionesFiltradas", args);
    }

    public List<CancionSL> recv_obtenerCancionesFiltradas() throws org.apache.thrift.TException
    {
      obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
      receiveBase(result, "obtenerCancionesFiltradas");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerCancionesFiltradas failed: unknown result");
    }

    public Usuario obtenerUsuario(String correo) throws org.apache.thrift.TException
    {
      send_obtenerUsuario(correo);
      return recv_obtenerUsuario();
    }

    public void send_obtenerUsuario(String correo) throws org.apache.thrift.TException
    {
      obtenerUsuario_args args = new obtenerUsuario_args();
      args.setCorreo(correo);
      sendBase("obtenerUsuario", args);
    }

    public Usuario recv_obtenerUsuario() throws org.apache.thrift.TException
    {
      obtenerUsuario_result result = new obtenerUsuario_result();
      receiveBase(result, "obtenerUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerUsuario failed: unknown result");
    }

    public boolean insertarUsuario(Usuario usuario) throws org.apache.thrift.TException
    {
      send_insertarUsuario(usuario);
      return recv_insertarUsuario();
    }

    public void send_insertarUsuario(Usuario usuario) throws org.apache.thrift.TException
    {
      insertarUsuario_args args = new insertarUsuario_args();
      args.setUsuario(usuario);
      sendBase("insertarUsuario", args);
    }

    public boolean recv_insertarUsuario() throws org.apache.thrift.TException
    {
      insertarUsuario_result result = new insertarUsuario_result();
      receiveBase(result, "insertarUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertarUsuario failed: unknown result");
    }

    public List<CancionSL> obtenerCancionesBiblioteca(String correo) throws org.apache.thrift.TException
    {
      send_obtenerCancionesBiblioteca(correo);
      return recv_obtenerCancionesBiblioteca();
    }

    public void send_obtenerCancionesBiblioteca(String correo) throws org.apache.thrift.TException
    {
      obtenerCancionesBiblioteca_args args = new obtenerCancionesBiblioteca_args();
      args.setCorreo(correo);
      sendBase("obtenerCancionesBiblioteca", args);
    }

    public List<CancionSL> recv_obtenerCancionesBiblioteca() throws org.apache.thrift.TException
    {
      obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
      receiveBase(result, "obtenerCancionesBiblioteca");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerCancionesBiblioteca failed: unknown result");
    }

    public ByteBuffer bajarCancion(String ruta) throws org.apache.thrift.TException
    {
      send_bajarCancion(ruta);
      return recv_bajarCancion();
    }

    public void send_bajarCancion(String ruta) throws org.apache.thrift.TException
    {
      bajarCancion_args args = new bajarCancion_args();
      args.setRuta(ruta);
      sendBase("bajarCancion", args);
    }

    public ByteBuffer recv_bajarCancion() throws org.apache.thrift.TException
    {
      bajarCancion_result result = new bajarCancion_result();
      receiveBase(result, "bajarCancion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bajarCancion failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void obtenerCancionesFiltradas(String criterio, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerCancionesFiltradas_call method_call = new obtenerCancionesFiltradas_call(criterio, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerCancionesFiltradas_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String criterio;
      public obtenerCancionesFiltradas_call(String criterio, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.criterio = criterio;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerCancionesFiltradas", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerCancionesFiltradas_args args = new obtenerCancionesFiltradas_args();
        args.setCriterio(criterio);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CancionSL> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerCancionesFiltradas();
      }
    }

    public void obtenerUsuario(String correo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerUsuario_call method_call = new obtenerUsuario_call(correo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerUsuario_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String correo;
      public obtenerUsuario_call(String correo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.correo = correo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerUsuario_args args = new obtenerUsuario_args();
        args.setCorreo(correo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Usuario getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerUsuario();
      }
    }

    public void insertarUsuario(Usuario usuario, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertarUsuario_call method_call = new insertarUsuario_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertarUsuario_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Usuario usuario;
      public insertarUsuario_call(Usuario usuario, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertarUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertarUsuario_args args = new insertarUsuario_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertarUsuario();
      }
    }

    public void obtenerCancionesBiblioteca(String correo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerCancionesBiblioteca_call method_call = new obtenerCancionesBiblioteca_call(correo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerCancionesBiblioteca_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String correo;
      public obtenerCancionesBiblioteca_call(String correo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.correo = correo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerCancionesBiblioteca", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerCancionesBiblioteca_args args = new obtenerCancionesBiblioteca_args();
        args.setCorreo(correo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CancionSL> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerCancionesBiblioteca();
      }
    }

    public void bajarCancion(String ruta, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bajarCancion_call method_call = new bajarCancion_call(ruta, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bajarCancion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ruta;
      public bajarCancion_call(String ruta, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ruta = ruta;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bajarCancion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bajarCancion_args args = new bajarCancion_args();
        args.setRuta(ruta);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bajarCancion();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("obtenerCancionesFiltradas", new obtenerCancionesFiltradas());
      processMap.put("obtenerUsuario", new obtenerUsuario());
      processMap.put("insertarUsuario", new insertarUsuario());
      processMap.put("obtenerCancionesBiblioteca", new obtenerCancionesBiblioteca());
      processMap.put("bajarCancion", new bajarCancion());
      return processMap;
    }

    public static class obtenerCancionesFiltradas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerCancionesFiltradas_args> {
      public obtenerCancionesFiltradas() {
        super("obtenerCancionesFiltradas");
      }

      public obtenerCancionesFiltradas_args getEmptyArgsInstance() {
        return new obtenerCancionesFiltradas_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerCancionesFiltradas_result getResult(I iface, obtenerCancionesFiltradas_args args) throws org.apache.thrift.TException {
        obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
        result.success = iface.obtenerCancionesFiltradas(args.criterio);
        return result;
      }
    }

    public static class obtenerUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerUsuario_args> {
      public obtenerUsuario() {
        super("obtenerUsuario");
      }

      public obtenerUsuario_args getEmptyArgsInstance() {
        return new obtenerUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerUsuario_result getResult(I iface, obtenerUsuario_args args) throws org.apache.thrift.TException {
        obtenerUsuario_result result = new obtenerUsuario_result();
        result.success = iface.obtenerUsuario(args.correo);
        return result;
      }
    }

    public static class insertarUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertarUsuario_args> {
      public insertarUsuario() {
        super("insertarUsuario");
      }

      public insertarUsuario_args getEmptyArgsInstance() {
        return new insertarUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertarUsuario_result getResult(I iface, insertarUsuario_args args) throws org.apache.thrift.TException {
        insertarUsuario_result result = new insertarUsuario_result();
        result.success = iface.insertarUsuario(args.usuario);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class obtenerCancionesBiblioteca<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerCancionesBiblioteca_args> {
      public obtenerCancionesBiblioteca() {
        super("obtenerCancionesBiblioteca");
      }

      public obtenerCancionesBiblioteca_args getEmptyArgsInstance() {
        return new obtenerCancionesBiblioteca_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerCancionesBiblioteca_result getResult(I iface, obtenerCancionesBiblioteca_args args) throws org.apache.thrift.TException {
        obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
        result.success = iface.obtenerCancionesBiblioteca(args.correo);
        return result;
      }
    }

    public static class bajarCancion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bajarCancion_args> {
      public bajarCancion() {
        super("bajarCancion");
      }

      public bajarCancion_args getEmptyArgsInstance() {
        return new bajarCancion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bajarCancion_result getResult(I iface, bajarCancion_args args) throws org.apache.thrift.TException {
        bajarCancion_result result = new bajarCancion_result();
        result.success = iface.bajarCancion(args.ruta);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("obtenerCancionesFiltradas", new obtenerCancionesFiltradas());
      processMap.put("obtenerUsuario", new obtenerUsuario());
      processMap.put("insertarUsuario", new insertarUsuario());
      processMap.put("obtenerCancionesBiblioteca", new obtenerCancionesBiblioteca());
      processMap.put("bajarCancion", new bajarCancion());
      return processMap;
    }

    public static class obtenerCancionesFiltradas<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerCancionesFiltradas_args, List<CancionSL>> {
      public obtenerCancionesFiltradas() {
        super("obtenerCancionesFiltradas");
      }

      public obtenerCancionesFiltradas_args getEmptyArgsInstance() {
        return new obtenerCancionesFiltradas_args();
      }

      public AsyncMethodCallback<List<CancionSL>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CancionSL>>() { 
          public void onComplete(List<CancionSL> o) {
            obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtenerCancionesFiltradas_result result = new obtenerCancionesFiltradas_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerCancionesFiltradas_args args, org.apache.thrift.async.AsyncMethodCallback<List<CancionSL>> resultHandler) throws TException {
        iface.obtenerCancionesFiltradas(args.criterio,resultHandler);
      }
    }

    public static class obtenerUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerUsuario_args, Usuario> {
      public obtenerUsuario() {
        super("obtenerUsuario");
      }

      public obtenerUsuario_args getEmptyArgsInstance() {
        return new obtenerUsuario_args();
      }

      public AsyncMethodCallback<Usuario> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Usuario>() { 
          public void onComplete(Usuario o) {
            obtenerUsuario_result result = new obtenerUsuario_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtenerUsuario_result result = new obtenerUsuario_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<Usuario> resultHandler) throws TException {
        iface.obtenerUsuario(args.correo,resultHandler);
      }
    }

    public static class insertarUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertarUsuario_args, Boolean> {
      public insertarUsuario() {
        super("insertarUsuario");
      }

      public insertarUsuario_args getEmptyArgsInstance() {
        return new insertarUsuario_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            insertarUsuario_result result = new insertarUsuario_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertarUsuario_result result = new insertarUsuario_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertarUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.insertarUsuario(args.usuario,resultHandler);
      }
    }

    public static class obtenerCancionesBiblioteca<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerCancionesBiblioteca_args, List<CancionSL>> {
      public obtenerCancionesBiblioteca() {
        super("obtenerCancionesBiblioteca");
      }

      public obtenerCancionesBiblioteca_args getEmptyArgsInstance() {
        return new obtenerCancionesBiblioteca_args();
      }

      public AsyncMethodCallback<List<CancionSL>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CancionSL>>() { 
          public void onComplete(List<CancionSL> o) {
            obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtenerCancionesBiblioteca_result result = new obtenerCancionesBiblioteca_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerCancionesBiblioteca_args args, org.apache.thrift.async.AsyncMethodCallback<List<CancionSL>> resultHandler) throws TException {
        iface.obtenerCancionesBiblioteca(args.correo,resultHandler);
      }
    }

    public static class bajarCancion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bajarCancion_args, ByteBuffer> {
      public bajarCancion() {
        super("bajarCancion");
      }

      public bajarCancion_args getEmptyArgsInstance() {
        return new bajarCancion_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            bajarCancion_result result = new bajarCancion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bajarCancion_result result = new bajarCancion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bajarCancion_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.bajarCancion(args.ruta,resultHandler);
      }
    }

  }

  public static class obtenerCancionesFiltradas_args implements org.apache.thrift.TBase<obtenerCancionesFiltradas_args, obtenerCancionesFiltradas_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesFiltradas_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesFiltradas_args");

    private static final org.apache.thrift.protocol.TField CRITERIO_FIELD_DESC = new org.apache.thrift.protocol.TField("criterio", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerCancionesFiltradas_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerCancionesFiltradas_argsTupleSchemeFactory());
    }

    public String criterio; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRITERIO((short)1, "criterio");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRITERIO
            return CRITERIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRITERIO, new org.apache.thrift.meta_data.FieldMetaData("criterio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesFiltradas_args.class, metaDataMap);
    }

    public obtenerCancionesFiltradas_args() {
    }

    public obtenerCancionesFiltradas_args(
      String criterio)
    {
      this();
      this.criterio = criterio;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesFiltradas_args(obtenerCancionesFiltradas_args other) {
      if (other.isSetCriterio()) {
        this.criterio = other.criterio;
      }
    }

    public obtenerCancionesFiltradas_args deepCopy() {
      return new obtenerCancionesFiltradas_args(this);
    }

    @Override
    public void clear() {
      this.criterio = null;
    }

    public String getCriterio() {
      return this.criterio;
    }

    public obtenerCancionesFiltradas_args setCriterio(String criterio) {
      this.criterio = criterio;
      return this;
    }

    public void unsetCriterio() {
      this.criterio = null;
    }

    /** Returns true if field criterio is set (has been assigned a value) and false otherwise */
    public boolean isSetCriterio() {
      return this.criterio != null;
    }

    public void setCriterioIsSet(boolean value) {
      if (!value) {
        this.criterio = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRITERIO:
        if (value == null) {
          unsetCriterio();
        } else {
          setCriterio((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRITERIO:
        return getCriterio();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRITERIO:
        return isSetCriterio();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesFiltradas_args)
        return this.equals((obtenerCancionesFiltradas_args)that);
      return false;
    }

    public boolean equals(obtenerCancionesFiltradas_args that) {
      if (that == null)
        return false;

      boolean this_present_criterio = true && this.isSetCriterio();
      boolean that_present_criterio = true && that.isSetCriterio();
      if (this_present_criterio || that_present_criterio) {
        if (!(this_present_criterio && that_present_criterio))
          return false;
        if (!this.criterio.equals(that.criterio))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(obtenerCancionesFiltradas_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCriterio()).compareTo(other.isSetCriterio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCriterio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.criterio, other.criterio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerCancionesFiltradas_args(");
      boolean first = true;

      sb.append("criterio:");
      if (this.criterio == null) {
        sb.append("null");
      } else {
        sb.append(this.criterio);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesFiltradas_argsStandardSchemeFactory implements SchemeFactory {
      public obtenerCancionesFiltradas_argsStandardScheme getScheme() {
        return new obtenerCancionesFiltradas_argsStandardScheme();
      }
    }

    private static class obtenerCancionesFiltradas_argsStandardScheme extends StandardScheme<obtenerCancionesFiltradas_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRITERIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.criterio = iprot.readString();
                struct.setCriterioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.criterio != null) {
          oprot.writeFieldBegin(CRITERIO_FIELD_DESC);
          oprot.writeString(struct.criterio);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesFiltradas_argsTupleSchemeFactory implements SchemeFactory {
      public obtenerCancionesFiltradas_argsTupleScheme getScheme() {
        return new obtenerCancionesFiltradas_argsTupleScheme();
      }
    }

    private static class obtenerCancionesFiltradas_argsTupleScheme extends TupleScheme<obtenerCancionesFiltradas_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCriterio()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCriterio()) {
          oprot.writeString(struct.criterio);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.criterio = iprot.readString();
          struct.setCriterioIsSet(true);
        }
      }
    }

  }

  public static class obtenerCancionesFiltradas_result implements org.apache.thrift.TBase<obtenerCancionesFiltradas_result, obtenerCancionesFiltradas_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesFiltradas_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesFiltradas_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerCancionesFiltradas_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerCancionesFiltradas_resultTupleSchemeFactory());
    }

    public List<CancionSL> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancionSL.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesFiltradas_result.class, metaDataMap);
    }

    public obtenerCancionesFiltradas_result() {
    }

    public obtenerCancionesFiltradas_result(
      List<CancionSL> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesFiltradas_result(obtenerCancionesFiltradas_result other) {
      if (other.isSetSuccess()) {
        List<CancionSL> __this__success = new ArrayList<CancionSL>(other.success.size());
        for (CancionSL other_element : other.success) {
          __this__success.add(new CancionSL(other_element));
        }
        this.success = __this__success;
      }
    }

    public obtenerCancionesFiltradas_result deepCopy() {
      return new obtenerCancionesFiltradas_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CancionSL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CancionSL elem) {
      if (this.success == null) {
        this.success = new ArrayList<CancionSL>();
      }
      this.success.add(elem);
    }

    public List<CancionSL> getSuccess() {
      return this.success;
    }

    public obtenerCancionesFiltradas_result setSuccess(List<CancionSL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CancionSL>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesFiltradas_result)
        return this.equals((obtenerCancionesFiltradas_result)that);
      return false;
    }

    public boolean equals(obtenerCancionesFiltradas_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(obtenerCancionesFiltradas_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerCancionesFiltradas_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesFiltradas_resultStandardSchemeFactory implements SchemeFactory {
      public obtenerCancionesFiltradas_resultStandardScheme getScheme() {
        return new obtenerCancionesFiltradas_resultStandardScheme();
      }
    }

    private static class obtenerCancionesFiltradas_resultStandardScheme extends StandardScheme<obtenerCancionesFiltradas_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<CancionSL>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    CancionSL _elem2;
                    _elem2 = new CancionSL();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CancionSL _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesFiltradas_resultTupleSchemeFactory implements SchemeFactory {
      public obtenerCancionesFiltradas_resultTupleScheme getScheme() {
        return new obtenerCancionesFiltradas_resultTupleScheme();
      }
    }

    private static class obtenerCancionesFiltradas_resultTupleScheme extends TupleScheme<obtenerCancionesFiltradas_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CancionSL _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesFiltradas_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CancionSL>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              CancionSL _elem7;
              _elem7 = new CancionSL();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class obtenerUsuario_args implements org.apache.thrift.TBase<obtenerUsuario_args, obtenerUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerUsuario_args");

    private static final org.apache.thrift.protocol.TField CORREO_FIELD_DESC = new org.apache.thrift.protocol.TField("correo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerUsuario_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerUsuario_argsTupleSchemeFactory());
    }

    public String correo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CORREO((short)1, "correo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CORREO
            return CORREO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CORREO, new org.apache.thrift.meta_data.FieldMetaData("correo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerUsuario_args.class, metaDataMap);
    }

    public obtenerUsuario_args() {
    }

    public obtenerUsuario_args(
      String correo)
    {
      this();
      this.correo = correo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerUsuario_args(obtenerUsuario_args other) {
      if (other.isSetCorreo()) {
        this.correo = other.correo;
      }
    }

    public obtenerUsuario_args deepCopy() {
      return new obtenerUsuario_args(this);
    }

    @Override
    public void clear() {
      this.correo = null;
    }

    public String getCorreo() {
      return this.correo;
    }

    public obtenerUsuario_args setCorreo(String correo) {
      this.correo = correo;
      return this;
    }

    public void unsetCorreo() {
      this.correo = null;
    }

    /** Returns true if field correo is set (has been assigned a value) and false otherwise */
    public boolean isSetCorreo() {
      return this.correo != null;
    }

    public void setCorreoIsSet(boolean value) {
      if (!value) {
        this.correo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CORREO:
        if (value == null) {
          unsetCorreo();
        } else {
          setCorreo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CORREO:
        return getCorreo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CORREO:
        return isSetCorreo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerUsuario_args)
        return this.equals((obtenerUsuario_args)that);
      return false;
    }

    public boolean equals(obtenerUsuario_args that) {
      if (that == null)
        return false;

      boolean this_present_correo = true && this.isSetCorreo();
      boolean that_present_correo = true && that.isSetCorreo();
      if (this_present_correo || that_present_correo) {
        if (!(this_present_correo && that_present_correo))
          return false;
        if (!this.correo.equals(that.correo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(obtenerUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCorreo()).compareTo(other.isSetCorreo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCorreo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correo, other.correo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerUsuario_args(");
      boolean first = true;

      sb.append("correo:");
      if (this.correo == null) {
        sb.append("null");
      } else {
        sb.append(this.correo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerUsuario_argsStandardSchemeFactory implements SchemeFactory {
      public obtenerUsuario_argsStandardScheme getScheme() {
        return new obtenerUsuario_argsStandardScheme();
      }
    }

    private static class obtenerUsuario_argsStandardScheme extends StandardScheme<obtenerUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CORREO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.correo = iprot.readString();
                struct.setCorreoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.correo != null) {
          oprot.writeFieldBegin(CORREO_FIELD_DESC);
          oprot.writeString(struct.correo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerUsuario_argsTupleSchemeFactory implements SchemeFactory {
      public obtenerUsuario_argsTupleScheme getScheme() {
        return new obtenerUsuario_argsTupleScheme();
      }
    }

    private static class obtenerUsuario_argsTupleScheme extends TupleScheme<obtenerUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCorreo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCorreo()) {
          oprot.writeString(struct.correo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.correo = iprot.readString();
          struct.setCorreoIsSet(true);
        }
      }
    }

  }

  public static class obtenerUsuario_result implements org.apache.thrift.TBase<obtenerUsuario_result, obtenerUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerUsuario_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerUsuario_resultTupleSchemeFactory());
    }

    public Usuario success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Usuario.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerUsuario_result.class, metaDataMap);
    }

    public obtenerUsuario_result() {
    }

    public obtenerUsuario_result(
      Usuario success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerUsuario_result(obtenerUsuario_result other) {
      if (other.isSetSuccess()) {
        this.success = new Usuario(other.success);
      }
    }

    public obtenerUsuario_result deepCopy() {
      return new obtenerUsuario_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Usuario getSuccess() {
      return this.success;
    }

    public obtenerUsuario_result setSuccess(Usuario success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Usuario)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerUsuario_result)
        return this.equals((obtenerUsuario_result)that);
      return false;
    }

    public boolean equals(obtenerUsuario_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(obtenerUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerUsuario_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerUsuario_resultStandardSchemeFactory implements SchemeFactory {
      public obtenerUsuario_resultStandardScheme getScheme() {
        return new obtenerUsuario_resultStandardScheme();
      }
    }

    private static class obtenerUsuario_resultStandardScheme extends StandardScheme<obtenerUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Usuario();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerUsuario_resultTupleSchemeFactory implements SchemeFactory {
      public obtenerUsuario_resultTupleScheme getScheme() {
        return new obtenerUsuario_resultTupleScheme();
      }
    }

    private static class obtenerUsuario_resultTupleScheme extends TupleScheme<obtenerUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Usuario();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertarUsuario_args implements org.apache.thrift.TBase<insertarUsuario_args, insertarUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertarUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertarUsuario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertarUsuario_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertarUsuario_argsTupleSchemeFactory());
    }

    public Usuario usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Usuario.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertarUsuario_args.class, metaDataMap);
    }

    public insertarUsuario_args() {
    }

    public insertarUsuario_args(
      Usuario usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertarUsuario_args(insertarUsuario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = new Usuario(other.usuario);
      }
    }

    public insertarUsuario_args deepCopy() {
      return new insertarUsuario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    public Usuario getUsuario() {
      return this.usuario;
    }

    public insertarUsuario_args setUsuario(Usuario usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((Usuario)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertarUsuario_args)
        return this.equals((insertarUsuario_args)that);
      return false;
    }

    public boolean equals(insertarUsuario_args that) {
      if (that == null)
        return false;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertarUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertarUsuario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (usuario != null) {
        usuario.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertarUsuario_argsStandardSchemeFactory implements SchemeFactory {
      public insertarUsuario_argsStandardScheme getScheme() {
        return new insertarUsuario_argsStandardScheme();
      }
    }

    private static class insertarUsuario_argsStandardScheme extends StandardScheme<insertarUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.usuario = new Usuario();
                struct.usuario.read(iprot);
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertarUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          struct.usuario.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertarUsuario_argsTupleSchemeFactory implements SchemeFactory {
      public insertarUsuario_argsTupleScheme getScheme() {
        return new insertarUsuario_argsTupleScheme();
      }
    }

    private static class insertarUsuario_argsTupleScheme extends TupleScheme<insertarUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertarUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          struct.usuario.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertarUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = new Usuario();
          struct.usuario.read(iprot);
          struct.setUsuarioIsSet(true);
        }
      }
    }

  }

  public static class insertarUsuario_result implements org.apache.thrift.TBase<insertarUsuario_result, insertarUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertarUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertarUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertarUsuario_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertarUsuario_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertarUsuario_result.class, metaDataMap);
    }

    public insertarUsuario_result() {
    }

    public insertarUsuario_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertarUsuario_result(insertarUsuario_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertarUsuario_result deepCopy() {
      return new insertarUsuario_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public insertarUsuario_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertarUsuario_result)
        return this.equals((insertarUsuario_result)that);
      return false;
    }

    public boolean equals(insertarUsuario_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertarUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertarUsuario_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertarUsuario_resultStandardSchemeFactory implements SchemeFactory {
      public insertarUsuario_resultStandardScheme getScheme() {
        return new insertarUsuario_resultStandardScheme();
      }
    }

    private static class insertarUsuario_resultStandardScheme extends StandardScheme<insertarUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertarUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertarUsuario_resultTupleSchemeFactory implements SchemeFactory {
      public insertarUsuario_resultTupleScheme getScheme() {
        return new insertarUsuario_resultTupleScheme();
      }
    }

    private static class insertarUsuario_resultTupleScheme extends TupleScheme<insertarUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertarUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertarUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class obtenerCancionesBiblioteca_args implements org.apache.thrift.TBase<obtenerCancionesBiblioteca_args, obtenerCancionesBiblioteca_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesBiblioteca_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesBiblioteca_args");

    private static final org.apache.thrift.protocol.TField CORREO_FIELD_DESC = new org.apache.thrift.protocol.TField("correo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerCancionesBiblioteca_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerCancionesBiblioteca_argsTupleSchemeFactory());
    }

    public String correo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CORREO((short)1, "correo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CORREO
            return CORREO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CORREO, new org.apache.thrift.meta_data.FieldMetaData("correo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesBiblioteca_args.class, metaDataMap);
    }

    public obtenerCancionesBiblioteca_args() {
    }

    public obtenerCancionesBiblioteca_args(
      String correo)
    {
      this();
      this.correo = correo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesBiblioteca_args(obtenerCancionesBiblioteca_args other) {
      if (other.isSetCorreo()) {
        this.correo = other.correo;
      }
    }

    public obtenerCancionesBiblioteca_args deepCopy() {
      return new obtenerCancionesBiblioteca_args(this);
    }

    @Override
    public void clear() {
      this.correo = null;
    }

    public String getCorreo() {
      return this.correo;
    }

    public obtenerCancionesBiblioteca_args setCorreo(String correo) {
      this.correo = correo;
      return this;
    }

    public void unsetCorreo() {
      this.correo = null;
    }

    /** Returns true if field correo is set (has been assigned a value) and false otherwise */
    public boolean isSetCorreo() {
      return this.correo != null;
    }

    public void setCorreoIsSet(boolean value) {
      if (!value) {
        this.correo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CORREO:
        if (value == null) {
          unsetCorreo();
        } else {
          setCorreo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CORREO:
        return getCorreo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CORREO:
        return isSetCorreo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesBiblioteca_args)
        return this.equals((obtenerCancionesBiblioteca_args)that);
      return false;
    }

    public boolean equals(obtenerCancionesBiblioteca_args that) {
      if (that == null)
        return false;

      boolean this_present_correo = true && this.isSetCorreo();
      boolean that_present_correo = true && that.isSetCorreo();
      if (this_present_correo || that_present_correo) {
        if (!(this_present_correo && that_present_correo))
          return false;
        if (!this.correo.equals(that.correo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(obtenerCancionesBiblioteca_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCorreo()).compareTo(other.isSetCorreo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCorreo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correo, other.correo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerCancionesBiblioteca_args(");
      boolean first = true;

      sb.append("correo:");
      if (this.correo == null) {
        sb.append("null");
      } else {
        sb.append(this.correo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesBiblioteca_argsStandardSchemeFactory implements SchemeFactory {
      public obtenerCancionesBiblioteca_argsStandardScheme getScheme() {
        return new obtenerCancionesBiblioteca_argsStandardScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_argsStandardScheme extends StandardScheme<obtenerCancionesBiblioteca_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CORREO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.correo = iprot.readString();
                struct.setCorreoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.correo != null) {
          oprot.writeFieldBegin(CORREO_FIELD_DESC);
          oprot.writeString(struct.correo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesBiblioteca_argsTupleSchemeFactory implements SchemeFactory {
      public obtenerCancionesBiblioteca_argsTupleScheme getScheme() {
        return new obtenerCancionesBiblioteca_argsTupleScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_argsTupleScheme extends TupleScheme<obtenerCancionesBiblioteca_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCorreo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCorreo()) {
          oprot.writeString(struct.correo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.correo = iprot.readString();
          struct.setCorreoIsSet(true);
        }
      }
    }

  }

  public static class obtenerCancionesBiblioteca_result implements org.apache.thrift.TBase<obtenerCancionesBiblioteca_result, obtenerCancionesBiblioteca_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerCancionesBiblioteca_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerCancionesBiblioteca_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerCancionesBiblioteca_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerCancionesBiblioteca_resultTupleSchemeFactory());
    }

    public List<CancionSL> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancionSL.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerCancionesBiblioteca_result.class, metaDataMap);
    }

    public obtenerCancionesBiblioteca_result() {
    }

    public obtenerCancionesBiblioteca_result(
      List<CancionSL> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerCancionesBiblioteca_result(obtenerCancionesBiblioteca_result other) {
      if (other.isSetSuccess()) {
        List<CancionSL> __this__success = new ArrayList<CancionSL>(other.success.size());
        for (CancionSL other_element : other.success) {
          __this__success.add(new CancionSL(other_element));
        }
        this.success = __this__success;
      }
    }

    public obtenerCancionesBiblioteca_result deepCopy() {
      return new obtenerCancionesBiblioteca_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CancionSL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CancionSL elem) {
      if (this.success == null) {
        this.success = new ArrayList<CancionSL>();
      }
      this.success.add(elem);
    }

    public List<CancionSL> getSuccess() {
      return this.success;
    }

    public obtenerCancionesBiblioteca_result setSuccess(List<CancionSL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CancionSL>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerCancionesBiblioteca_result)
        return this.equals((obtenerCancionesBiblioteca_result)that);
      return false;
    }

    public boolean equals(obtenerCancionesBiblioteca_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(obtenerCancionesBiblioteca_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerCancionesBiblioteca_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerCancionesBiblioteca_resultStandardSchemeFactory implements SchemeFactory {
      public obtenerCancionesBiblioteca_resultStandardScheme getScheme() {
        return new obtenerCancionesBiblioteca_resultStandardScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_resultStandardScheme extends StandardScheme<obtenerCancionesBiblioteca_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<CancionSL>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    CancionSL _elem10;
                    _elem10 = new CancionSL();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CancionSL _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerCancionesBiblioteca_resultTupleSchemeFactory implements SchemeFactory {
      public obtenerCancionesBiblioteca_resultTupleScheme getScheme() {
        return new obtenerCancionesBiblioteca_resultTupleScheme();
      }
    }

    private static class obtenerCancionesBiblioteca_resultTupleScheme extends TupleScheme<obtenerCancionesBiblioteca_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CancionSL _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerCancionesBiblioteca_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CancionSL>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              CancionSL _elem15;
              _elem15 = new CancionSL();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bajarCancion_args implements org.apache.thrift.TBase<bajarCancion_args, bajarCancion_args._Fields>, java.io.Serializable, Cloneable, Comparable<bajarCancion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bajarCancion_args");

    private static final org.apache.thrift.protocol.TField RUTA_FIELD_DESC = new org.apache.thrift.protocol.TField("ruta", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bajarCancion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bajarCancion_argsTupleSchemeFactory());
    }

    public String ruta; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RUTA((short)1, "ruta");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RUTA
            return RUTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RUTA, new org.apache.thrift.meta_data.FieldMetaData("ruta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bajarCancion_args.class, metaDataMap);
    }

    public bajarCancion_args() {
    }

    public bajarCancion_args(
      String ruta)
    {
      this();
      this.ruta = ruta;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bajarCancion_args(bajarCancion_args other) {
      if (other.isSetRuta()) {
        this.ruta = other.ruta;
      }
    }

    public bajarCancion_args deepCopy() {
      return new bajarCancion_args(this);
    }

    @Override
    public void clear() {
      this.ruta = null;
    }

    public String getRuta() {
      return this.ruta;
    }

    public bajarCancion_args setRuta(String ruta) {
      this.ruta = ruta;
      return this;
    }

    public void unsetRuta() {
      this.ruta = null;
    }

    /** Returns true if field ruta is set (has been assigned a value) and false otherwise */
    public boolean isSetRuta() {
      return this.ruta != null;
    }

    public void setRutaIsSet(boolean value) {
      if (!value) {
        this.ruta = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RUTA:
        if (value == null) {
          unsetRuta();
        } else {
          setRuta((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RUTA:
        return getRuta();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RUTA:
        return isSetRuta();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bajarCancion_args)
        return this.equals((bajarCancion_args)that);
      return false;
    }

    public boolean equals(bajarCancion_args that) {
      if (that == null)
        return false;

      boolean this_present_ruta = true && this.isSetRuta();
      boolean that_present_ruta = true && that.isSetRuta();
      if (this_present_ruta || that_present_ruta) {
        if (!(this_present_ruta && that_present_ruta))
          return false;
        if (!this.ruta.equals(that.ruta))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bajarCancion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRuta()).compareTo(other.isSetRuta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruta, other.ruta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bajarCancion_args(");
      boolean first = true;

      sb.append("ruta:");
      if (this.ruta == null) {
        sb.append("null");
      } else {
        sb.append(this.ruta);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bajarCancion_argsStandardSchemeFactory implements SchemeFactory {
      public bajarCancion_argsStandardScheme getScheme() {
        return new bajarCancion_argsStandardScheme();
      }
    }

    private static class bajarCancion_argsStandardScheme extends StandardScheme<bajarCancion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bajarCancion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RUTA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ruta = iprot.readString();
                struct.setRutaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bajarCancion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ruta != null) {
          oprot.writeFieldBegin(RUTA_FIELD_DESC);
          oprot.writeString(struct.ruta);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bajarCancion_argsTupleSchemeFactory implements SchemeFactory {
      public bajarCancion_argsTupleScheme getScheme() {
        return new bajarCancion_argsTupleScheme();
      }
    }

    private static class bajarCancion_argsTupleScheme extends TupleScheme<bajarCancion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bajarCancion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRuta()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRuta()) {
          oprot.writeString(struct.ruta);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bajarCancion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ruta = iprot.readString();
          struct.setRutaIsSet(true);
        }
      }
    }

  }

  public static class bajarCancion_result implements org.apache.thrift.TBase<bajarCancion_result, bajarCancion_result._Fields>, java.io.Serializable, Cloneable, Comparable<bajarCancion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bajarCancion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bajarCancion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bajarCancion_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bajarCancion_result.class, metaDataMap);
    }

    public bajarCancion_result() {
    }

    public bajarCancion_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bajarCancion_result(bajarCancion_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public bajarCancion_result deepCopy() {
      return new bajarCancion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public bajarCancion_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public bajarCancion_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bajarCancion_result)
        return this.equals((bajarCancion_result)that);
      return false;
    }

    public boolean equals(bajarCancion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bajarCancion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bajarCancion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bajarCancion_resultStandardSchemeFactory implements SchemeFactory {
      public bajarCancion_resultStandardScheme getScheme() {
        return new bajarCancion_resultStandardScheme();
      }
    }

    private static class bajarCancion_resultStandardScheme extends StandardScheme<bajarCancion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bajarCancion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bajarCancion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bajarCancion_resultTupleSchemeFactory implements SchemeFactory {
      public bajarCancion_resultTupleScheme getScheme() {
        return new bajarCancion_resultTupleScheme();
      }
    }

    private static class bajarCancion_resultTupleScheme extends TupleScheme<bajarCancion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bajarCancion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bajarCancion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
