/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CancionSL implements org.apache.thrift.TBase<CancionSL, CancionSL._Fields>, java.io.Serializable, Cloneable, Comparable<CancionSL> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancionSL");

  private static final org.apache.thrift.protocol.TField ID_CANCION_FIELD_DESC = new org.apache.thrift.protocol.TField("idCancion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITULO_FIELD_DESC = new org.apache.thrift.protocol.TField("titulo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RUTA_FIELD_DESC = new org.apache.thrift.protocol.TField("ruta", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("album", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ARTISTA_FIELD_DESC = new org.apache.thrift.protocol.TField("artista", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GENERO_FIELD_DESC = new org.apache.thrift.protocol.TField("genero", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CORREO_ARTISTA_FIELD_DESC = new org.apache.thrift.protocol.TField("correoArtista", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ID_ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("idAlbum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ID_GENERO_FIELD_DESC = new org.apache.thrift.protocol.TField("idGenero", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IMAGEN_ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("imagenAlbum", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CancionSLStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CancionSLTupleSchemeFactory());
  }

  public int idCancion; // required
  public String titulo; // required
  public String ruta; // required
  public String album; // required
  public String artista; // required
  public String genero; // required
  public String correoArtista; // required
  public int idAlbum; // required
  public int idGenero; // required
  public ByteBuffer imagenAlbum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_CANCION((short)1, "idCancion"),
    TITULO((short)2, "titulo"),
    RUTA((short)3, "ruta"),
    ALBUM((short)4, "album"),
    ARTISTA((short)5, "artista"),
    GENERO((short)6, "genero"),
    CORREO_ARTISTA((short)7, "correoArtista"),
    ID_ALBUM((short)8, "idAlbum"),
    ID_GENERO((short)9, "idGenero"),
    IMAGEN_ALBUM((short)10, "imagenAlbum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_CANCION
          return ID_CANCION;
        case 2: // TITULO
          return TITULO;
        case 3: // RUTA
          return RUTA;
        case 4: // ALBUM
          return ALBUM;
        case 5: // ARTISTA
          return ARTISTA;
        case 6: // GENERO
          return GENERO;
        case 7: // CORREO_ARTISTA
          return CORREO_ARTISTA;
        case 8: // ID_ALBUM
          return ID_ALBUM;
        case 9: // ID_GENERO
          return ID_GENERO;
        case 10: // IMAGEN_ALBUM
          return IMAGEN_ALBUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDCANCION_ISSET_ID = 0;
  private static final int __IDALBUM_ISSET_ID = 1;
  private static final int __IDGENERO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_CANCION, new org.apache.thrift.meta_data.FieldMetaData("idCancion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITULO, new org.apache.thrift.meta_data.FieldMetaData("titulo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUTA, new org.apache.thrift.meta_data.FieldMetaData("ruta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM, new org.apache.thrift.meta_data.FieldMetaData("album", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTISTA, new org.apache.thrift.meta_data.FieldMetaData("artista", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERO, new org.apache.thrift.meta_data.FieldMetaData("genero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORREO_ARTISTA, new org.apache.thrift.meta_data.FieldMetaData("correoArtista", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_ALBUM, new org.apache.thrift.meta_data.FieldMetaData("idAlbum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_GENERO, new org.apache.thrift.meta_data.FieldMetaData("idGenero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGEN_ALBUM, new org.apache.thrift.meta_data.FieldMetaData("imagenAlbum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancionSL.class, metaDataMap);
  }

  public CancionSL() {
  }

  public CancionSL(
    int idCancion,
    String titulo,
    String ruta,
    String album,
    String artista,
    String genero,
    String correoArtista,
    int idAlbum,
    int idGenero,
    ByteBuffer imagenAlbum)
  {
    this();
    this.idCancion = idCancion;
    setIdCancionIsSet(true);
    this.titulo = titulo;
    this.ruta = ruta;
    this.album = album;
    this.artista = artista;
    this.genero = genero;
    this.correoArtista = correoArtista;
    this.idAlbum = idAlbum;
    setIdAlbumIsSet(true);
    this.idGenero = idGenero;
    setIdGeneroIsSet(true);
    this.imagenAlbum = imagenAlbum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CancionSL(CancionSL other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idCancion = other.idCancion;
    if (other.isSetTitulo()) {
      this.titulo = other.titulo;
    }
    if (other.isSetRuta()) {
      this.ruta = other.ruta;
    }
    if (other.isSetAlbum()) {
      this.album = other.album;
    }
    if (other.isSetArtista()) {
      this.artista = other.artista;
    }
    if (other.isSetGenero()) {
      this.genero = other.genero;
    }
    if (other.isSetCorreoArtista()) {
      this.correoArtista = other.correoArtista;
    }
    this.idAlbum = other.idAlbum;
    this.idGenero = other.idGenero;
    if (other.isSetImagenAlbum()) {
      this.imagenAlbum = org.apache.thrift.TBaseHelper.copyBinary(other.imagenAlbum);
;
    }
  }

  public CancionSL deepCopy() {
    return new CancionSL(this);
  }

  @Override
  public void clear() {
    setIdCancionIsSet(false);
    this.idCancion = 0;
    this.titulo = null;
    this.ruta = null;
    this.album = null;
    this.artista = null;
    this.genero = null;
    this.correoArtista = null;
    setIdAlbumIsSet(false);
    this.idAlbum = 0;
    setIdGeneroIsSet(false);
    this.idGenero = 0;
    this.imagenAlbum = null;
  }

  public int getIdCancion() {
    return this.idCancion;
  }

  public CancionSL setIdCancion(int idCancion) {
    this.idCancion = idCancion;
    setIdCancionIsSet(true);
    return this;
  }

  public void unsetIdCancion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDCANCION_ISSET_ID);
  }

  /** Returns true if field idCancion is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCancion() {
    return EncodingUtils.testBit(__isset_bitfield, __IDCANCION_ISSET_ID);
  }

  public void setIdCancionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDCANCION_ISSET_ID, value);
  }

  public String getTitulo() {
    return this.titulo;
  }

  public CancionSL setTitulo(String titulo) {
    this.titulo = titulo;
    return this;
  }

  public void unsetTitulo() {
    this.titulo = null;
  }

  /** Returns true if field titulo is set (has been assigned a value) and false otherwise */
  public boolean isSetTitulo() {
    return this.titulo != null;
  }

  public void setTituloIsSet(boolean value) {
    if (!value) {
      this.titulo = null;
    }
  }

  public String getRuta() {
    return this.ruta;
  }

  public CancionSL setRuta(String ruta) {
    this.ruta = ruta;
    return this;
  }

  public void unsetRuta() {
    this.ruta = null;
  }

  /** Returns true if field ruta is set (has been assigned a value) and false otherwise */
  public boolean isSetRuta() {
    return this.ruta != null;
  }

  public void setRutaIsSet(boolean value) {
    if (!value) {
      this.ruta = null;
    }
  }

  public String getAlbum() {
    return this.album;
  }

  public CancionSL setAlbum(String album) {
    this.album = album;
    return this;
  }

  public void unsetAlbum() {
    this.album = null;
  }

  /** Returns true if field album is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbum() {
    return this.album != null;
  }

  public void setAlbumIsSet(boolean value) {
    if (!value) {
      this.album = null;
    }
  }

  public String getArtista() {
    return this.artista;
  }

  public CancionSL setArtista(String artista) {
    this.artista = artista;
    return this;
  }

  public void unsetArtista() {
    this.artista = null;
  }

  /** Returns true if field artista is set (has been assigned a value) and false otherwise */
  public boolean isSetArtista() {
    return this.artista != null;
  }

  public void setArtistaIsSet(boolean value) {
    if (!value) {
      this.artista = null;
    }
  }

  public String getGenero() {
    return this.genero;
  }

  public CancionSL setGenero(String genero) {
    this.genero = genero;
    return this;
  }

  public void unsetGenero() {
    this.genero = null;
  }

  /** Returns true if field genero is set (has been assigned a value) and false otherwise */
  public boolean isSetGenero() {
    return this.genero != null;
  }

  public void setGeneroIsSet(boolean value) {
    if (!value) {
      this.genero = null;
    }
  }

  public String getCorreoArtista() {
    return this.correoArtista;
  }

  public CancionSL setCorreoArtista(String correoArtista) {
    this.correoArtista = correoArtista;
    return this;
  }

  public void unsetCorreoArtista() {
    this.correoArtista = null;
  }

  /** Returns true if field correoArtista is set (has been assigned a value) and false otherwise */
  public boolean isSetCorreoArtista() {
    return this.correoArtista != null;
  }

  public void setCorreoArtistaIsSet(boolean value) {
    if (!value) {
      this.correoArtista = null;
    }
  }

  public int getIdAlbum() {
    return this.idAlbum;
  }

  public CancionSL setIdAlbum(int idAlbum) {
    this.idAlbum = idAlbum;
    setIdAlbumIsSet(true);
    return this;
  }

  public void unsetIdAlbum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDALBUM_ISSET_ID);
  }

  /** Returns true if field idAlbum is set (has been assigned a value) and false otherwise */
  public boolean isSetIdAlbum() {
    return EncodingUtils.testBit(__isset_bitfield, __IDALBUM_ISSET_ID);
  }

  public void setIdAlbumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDALBUM_ISSET_ID, value);
  }

  public int getIdGenero() {
    return this.idGenero;
  }

  public CancionSL setIdGenero(int idGenero) {
    this.idGenero = idGenero;
    setIdGeneroIsSet(true);
    return this;
  }

  public void unsetIdGenero() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDGENERO_ISSET_ID);
  }

  /** Returns true if field idGenero is set (has been assigned a value) and false otherwise */
  public boolean isSetIdGenero() {
    return EncodingUtils.testBit(__isset_bitfield, __IDGENERO_ISSET_ID);
  }

  public void setIdGeneroIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDGENERO_ISSET_ID, value);
  }

  public byte[] getImagenAlbum() {
    setImagenAlbum(org.apache.thrift.TBaseHelper.rightSize(imagenAlbum));
    return imagenAlbum == null ? null : imagenAlbum.array();
  }

  public ByteBuffer bufferForImagenAlbum() {
    return imagenAlbum;
  }

  public CancionSL setImagenAlbum(byte[] imagenAlbum) {
    setImagenAlbum(imagenAlbum == null ? (ByteBuffer)null : ByteBuffer.wrap(imagenAlbum));
    return this;
  }

  public CancionSL setImagenAlbum(ByteBuffer imagenAlbum) {
    this.imagenAlbum = imagenAlbum;
    return this;
  }

  public void unsetImagenAlbum() {
    this.imagenAlbum = null;
  }

  /** Returns true if field imagenAlbum is set (has been assigned a value) and false otherwise */
  public boolean isSetImagenAlbum() {
    return this.imagenAlbum != null;
  }

  public void setImagenAlbumIsSet(boolean value) {
    if (!value) {
      this.imagenAlbum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID_CANCION:
      if (value == null) {
        unsetIdCancion();
      } else {
        setIdCancion((Integer)value);
      }
      break;

    case TITULO:
      if (value == null) {
        unsetTitulo();
      } else {
        setTitulo((String)value);
      }
      break;

    case RUTA:
      if (value == null) {
        unsetRuta();
      } else {
        setRuta((String)value);
      }
      break;

    case ALBUM:
      if (value == null) {
        unsetAlbum();
      } else {
        setAlbum((String)value);
      }
      break;

    case ARTISTA:
      if (value == null) {
        unsetArtista();
      } else {
        setArtista((String)value);
      }
      break;

    case GENERO:
      if (value == null) {
        unsetGenero();
      } else {
        setGenero((String)value);
      }
      break;

    case CORREO_ARTISTA:
      if (value == null) {
        unsetCorreoArtista();
      } else {
        setCorreoArtista((String)value);
      }
      break;

    case ID_ALBUM:
      if (value == null) {
        unsetIdAlbum();
      } else {
        setIdAlbum((Integer)value);
      }
      break;

    case ID_GENERO:
      if (value == null) {
        unsetIdGenero();
      } else {
        setIdGenero((Integer)value);
      }
      break;

    case IMAGEN_ALBUM:
      if (value == null) {
        unsetImagenAlbum();
      } else {
        setImagenAlbum((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_CANCION:
      return Integer.valueOf(getIdCancion());

    case TITULO:
      return getTitulo();

    case RUTA:
      return getRuta();

    case ALBUM:
      return getAlbum();

    case ARTISTA:
      return getArtista();

    case GENERO:
      return getGenero();

    case CORREO_ARTISTA:
      return getCorreoArtista();

    case ID_ALBUM:
      return Integer.valueOf(getIdAlbum());

    case ID_GENERO:
      return Integer.valueOf(getIdGenero());

    case IMAGEN_ALBUM:
      return getImagenAlbum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID_CANCION:
      return isSetIdCancion();
    case TITULO:
      return isSetTitulo();
    case RUTA:
      return isSetRuta();
    case ALBUM:
      return isSetAlbum();
    case ARTISTA:
      return isSetArtista();
    case GENERO:
      return isSetGenero();
    case CORREO_ARTISTA:
      return isSetCorreoArtista();
    case ID_ALBUM:
      return isSetIdAlbum();
    case ID_GENERO:
      return isSetIdGenero();
    case IMAGEN_ALBUM:
      return isSetImagenAlbum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CancionSL)
      return this.equals((CancionSL)that);
    return false;
  }

  public boolean equals(CancionSL that) {
    if (that == null)
      return false;

    boolean this_present_idCancion = true;
    boolean that_present_idCancion = true;
    if (this_present_idCancion || that_present_idCancion) {
      if (!(this_present_idCancion && that_present_idCancion))
        return false;
      if (this.idCancion != that.idCancion)
        return false;
    }

    boolean this_present_titulo = true && this.isSetTitulo();
    boolean that_present_titulo = true && that.isSetTitulo();
    if (this_present_titulo || that_present_titulo) {
      if (!(this_present_titulo && that_present_titulo))
        return false;
      if (!this.titulo.equals(that.titulo))
        return false;
    }

    boolean this_present_ruta = true && this.isSetRuta();
    boolean that_present_ruta = true && that.isSetRuta();
    if (this_present_ruta || that_present_ruta) {
      if (!(this_present_ruta && that_present_ruta))
        return false;
      if (!this.ruta.equals(that.ruta))
        return false;
    }

    boolean this_present_album = true && this.isSetAlbum();
    boolean that_present_album = true && that.isSetAlbum();
    if (this_present_album || that_present_album) {
      if (!(this_present_album && that_present_album))
        return false;
      if (!this.album.equals(that.album))
        return false;
    }

    boolean this_present_artista = true && this.isSetArtista();
    boolean that_present_artista = true && that.isSetArtista();
    if (this_present_artista || that_present_artista) {
      if (!(this_present_artista && that_present_artista))
        return false;
      if (!this.artista.equals(that.artista))
        return false;
    }

    boolean this_present_genero = true && this.isSetGenero();
    boolean that_present_genero = true && that.isSetGenero();
    if (this_present_genero || that_present_genero) {
      if (!(this_present_genero && that_present_genero))
        return false;
      if (!this.genero.equals(that.genero))
        return false;
    }

    boolean this_present_correoArtista = true && this.isSetCorreoArtista();
    boolean that_present_correoArtista = true && that.isSetCorreoArtista();
    if (this_present_correoArtista || that_present_correoArtista) {
      if (!(this_present_correoArtista && that_present_correoArtista))
        return false;
      if (!this.correoArtista.equals(that.correoArtista))
        return false;
    }

    boolean this_present_idAlbum = true;
    boolean that_present_idAlbum = true;
    if (this_present_idAlbum || that_present_idAlbum) {
      if (!(this_present_idAlbum && that_present_idAlbum))
        return false;
      if (this.idAlbum != that.idAlbum)
        return false;
    }

    boolean this_present_idGenero = true;
    boolean that_present_idGenero = true;
    if (this_present_idGenero || that_present_idGenero) {
      if (!(this_present_idGenero && that_present_idGenero))
        return false;
      if (this.idGenero != that.idGenero)
        return false;
    }

    boolean this_present_imagenAlbum = true && this.isSetImagenAlbum();
    boolean that_present_imagenAlbum = true && that.isSetImagenAlbum();
    if (this_present_imagenAlbum || that_present_imagenAlbum) {
      if (!(this_present_imagenAlbum && that_present_imagenAlbum))
        return false;
      if (!this.imagenAlbum.equals(that.imagenAlbum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CancionSL other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdCancion()).compareTo(other.isSetIdCancion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCancion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCancion, other.idCancion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitulo()).compareTo(other.isSetTitulo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitulo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titulo, other.titulo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuta()).compareTo(other.isSetRuta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruta, other.ruta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbum()).compareTo(other.isSetAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.album, other.album);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtista()).compareTo(other.isSetArtista());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtista()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artista, other.artista);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenero()).compareTo(other.isSetGenero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genero, other.genero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorreoArtista()).compareTo(other.isSetCorreoArtista());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorreoArtista()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correoArtista, other.correoArtista);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdAlbum()).compareTo(other.isSetIdAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idAlbum, other.idAlbum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdGenero()).compareTo(other.isSetIdGenero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdGenero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idGenero, other.idGenero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImagenAlbum()).compareTo(other.isSetImagenAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImagenAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagenAlbum, other.imagenAlbum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CancionSL(");
    boolean first = true;

    sb.append("idCancion:");
    sb.append(this.idCancion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("titulo:");
    if (this.titulo == null) {
      sb.append("null");
    } else {
      sb.append(this.titulo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruta:");
    if (this.ruta == null) {
      sb.append("null");
    } else {
      sb.append(this.ruta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("album:");
    if (this.album == null) {
      sb.append("null");
    } else {
      sb.append(this.album);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("artista:");
    if (this.artista == null) {
      sb.append("null");
    } else {
      sb.append(this.artista);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genero:");
    if (this.genero == null) {
      sb.append("null");
    } else {
      sb.append(this.genero);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correoArtista:");
    if (this.correoArtista == null) {
      sb.append("null");
    } else {
      sb.append(this.correoArtista);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idAlbum:");
    sb.append(this.idAlbum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idGenero:");
    sb.append(this.idGenero);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imagenAlbum:");
    if (this.imagenAlbum == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.imagenAlbum, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CancionSLStandardSchemeFactory implements SchemeFactory {
    public CancionSLStandardScheme getScheme() {
      return new CancionSLStandardScheme();
    }
  }

  private static class CancionSLStandardScheme extends StandardScheme<CancionSL> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CancionSL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_CANCION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idCancion = iprot.readI32();
              struct.setIdCancionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITULO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titulo = iprot.readString();
              struct.setTituloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RUTA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ruta = iprot.readString();
              struct.setRutaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.album = iprot.readString();
              struct.setAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARTISTA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.artista = iprot.readString();
              struct.setArtistaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GENERO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genero = iprot.readString();
              struct.setGeneroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CORREO_ARTISTA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.correoArtista = iprot.readString();
              struct.setCorreoArtistaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID_ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idAlbum = iprot.readI32();
              struct.setIdAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID_GENERO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idGenero = iprot.readI32();
              struct.setIdGeneroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMAGEN_ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imagenAlbum = iprot.readBinary();
              struct.setImagenAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CancionSL struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_CANCION_FIELD_DESC);
      oprot.writeI32(struct.idCancion);
      oprot.writeFieldEnd();
      if (struct.titulo != null) {
        oprot.writeFieldBegin(TITULO_FIELD_DESC);
        oprot.writeString(struct.titulo);
        oprot.writeFieldEnd();
      }
      if (struct.ruta != null) {
        oprot.writeFieldBegin(RUTA_FIELD_DESC);
        oprot.writeString(struct.ruta);
        oprot.writeFieldEnd();
      }
      if (struct.album != null) {
        oprot.writeFieldBegin(ALBUM_FIELD_DESC);
        oprot.writeString(struct.album);
        oprot.writeFieldEnd();
      }
      if (struct.artista != null) {
        oprot.writeFieldBegin(ARTISTA_FIELD_DESC);
        oprot.writeString(struct.artista);
        oprot.writeFieldEnd();
      }
      if (struct.genero != null) {
        oprot.writeFieldBegin(GENERO_FIELD_DESC);
        oprot.writeString(struct.genero);
        oprot.writeFieldEnd();
      }
      if (struct.correoArtista != null) {
        oprot.writeFieldBegin(CORREO_ARTISTA_FIELD_DESC);
        oprot.writeString(struct.correoArtista);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_ALBUM_FIELD_DESC);
      oprot.writeI32(struct.idAlbum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_GENERO_FIELD_DESC);
      oprot.writeI32(struct.idGenero);
      oprot.writeFieldEnd();
      if (struct.imagenAlbum != null) {
        oprot.writeFieldBegin(IMAGEN_ALBUM_FIELD_DESC);
        oprot.writeBinary(struct.imagenAlbum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CancionSLTupleSchemeFactory implements SchemeFactory {
    public CancionSLTupleScheme getScheme() {
      return new CancionSLTupleScheme();
    }
  }

  private static class CancionSLTupleScheme extends TupleScheme<CancionSL> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CancionSL struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdCancion()) {
        optionals.set(0);
      }
      if (struct.isSetTitulo()) {
        optionals.set(1);
      }
      if (struct.isSetRuta()) {
        optionals.set(2);
      }
      if (struct.isSetAlbum()) {
        optionals.set(3);
      }
      if (struct.isSetArtista()) {
        optionals.set(4);
      }
      if (struct.isSetGenero()) {
        optionals.set(5);
      }
      if (struct.isSetCorreoArtista()) {
        optionals.set(6);
      }
      if (struct.isSetIdAlbum()) {
        optionals.set(7);
      }
      if (struct.isSetIdGenero()) {
        optionals.set(8);
      }
      if (struct.isSetImagenAlbum()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetIdCancion()) {
        oprot.writeI32(struct.idCancion);
      }
      if (struct.isSetTitulo()) {
        oprot.writeString(struct.titulo);
      }
      if (struct.isSetRuta()) {
        oprot.writeString(struct.ruta);
      }
      if (struct.isSetAlbum()) {
        oprot.writeString(struct.album);
      }
      if (struct.isSetArtista()) {
        oprot.writeString(struct.artista);
      }
      if (struct.isSetGenero()) {
        oprot.writeString(struct.genero);
      }
      if (struct.isSetCorreoArtista()) {
        oprot.writeString(struct.correoArtista);
      }
      if (struct.isSetIdAlbum()) {
        oprot.writeI32(struct.idAlbum);
      }
      if (struct.isSetIdGenero()) {
        oprot.writeI32(struct.idGenero);
      }
      if (struct.isSetImagenAlbum()) {
        oprot.writeBinary(struct.imagenAlbum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CancionSL struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.idCancion = iprot.readI32();
        struct.setIdCancionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.titulo = iprot.readString();
        struct.setTituloIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ruta = iprot.readString();
        struct.setRutaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.album = iprot.readString();
        struct.setAlbumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.artista = iprot.readString();
        struct.setArtistaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.genero = iprot.readString();
        struct.setGeneroIsSet(true);
      }
      if (incoming.get(6)) {
        struct.correoArtista = iprot.readString();
        struct.setCorreoArtistaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.idAlbum = iprot.readI32();
        struct.setIdAlbumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.idGenero = iprot.readI32();
        struct.setIdGeneroIsSet(true);
      }
      if (incoming.get(9)) {
        struct.imagenAlbum = iprot.readBinary();
        struct.setImagenAlbumIsSet(true);
      }
    }
  }

}

